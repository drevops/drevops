#!/usr/bin/env bash
#
# Helpers related to DrevOps common testing functionality.
#
# In some cases, shell may report platform incorrectly. Run with forced platform:
# DOCKER_DEFAULT_PLATFORM=linux/amd64 bats --tap tests/bats/test.bats
#
# shellcheck disable=SC2155,SC2119,SC2120,SC2044,SC2294
#

################################################################################
#                       BATS HOOK IMPLEMENTATIONS                              #
################################################################################

setup() {
  # The root directory of the project.
  export ROOT_DIR="$(dirname "$(cd "$(dirname "${BATS_TEST_DIRNAME}")/../../.." && pwd)")"

  [ ! -d "${ROOT_DIR}/.scaffold" ] && echo 'ERROR: The test should be run from the ".scaffold" directory.' && exit 1

  # Register a path to libraries.
  export BATS_LIB_PATH="${BATS_TEST_DIRNAME}/../node_modules"
  bats_load_library bats-helpers

  ##
  ## Application test directories structure setup.
  ##

  # To run installation tests, several fixture directories are required.
  # They are defined and created in setup() test method.
  #
  # Root build directory where the rest of fixture directories located.
  # The "build" in this context is a place to store assets produced by the
  # installer script during the test.
  export BUILD_DIR="${BUILD_DIR:-"${BATS_TEST_TMPDIR//\/\//\/}/drevops-$(date +%s)"}"

  # Directory where the installer script is executed.
  # May have existing project files (e.g. from previous installations) or be
  # empty (to facilitate brand-new install).
  export CURRENT_PROJECT_DIR="${BUILD_DIR}/star_wars"

  # Directory where the installer script will be sourcing the instance of DrevOps.
  # As a part of test setup, the local copy of DrevOps at the last commit is
  # copied to this location. This means that during development of tests local
  # changes need to be committed.
  export LOCAL_REPO_DIR="${BUILD_DIR}/local_repo"

  fixture_prepare_dir "${BUILD_DIR}"
  fixture_prepare_dir "${CURRENT_PROJECT_DIR}"
  fixture_prepare_dir "${LOCAL_REPO_DIR}"

  # Allow to override debug variables from environment when developing tests.
  export DREVOPS_DEBUG="${TEST_DREVOPS_DEBUG:-}"

  ##
  ## SUT files setup.
  ##

  # Copy DrevOps at the last commit.
  fixture_export_codebase "${LOCAL_REPO_DIR}" "${ROOT_DIR}" >/dev/null

  # Prepare global git config and ignore files required for testing cleanup scenarios.
  prepare_global_gitconfig
  prepare_global_gitignore

  ##
  ## Setting debug mode.
  ##

  # Print debug if "--verbose-run" is passed or TEST_DREVOPS_DEBUG is set to "1".
  if [ "${BATS_VERBOSE_RUN:-}" = "1" ] || [ "${TEST_DREVOPS_DEBUG:-}" = "1" ]; then
    echo "Verbose run enabled." >&3
    echo "BUILD_DIR: ${BUILD_DIR}" >&3
    export RUN_STEPS_DEBUG=1
  fi

  # Change directory to the current project directory for each test. Tests
  # requiring to operate outside of CURRENT_PROJECT_DIR (like deployment tests)
  # should change directory explicitly within their tests.
  pushd "${CURRENT_PROJECT_DIR}" >/dev/null || exit 1
}

teardown() {
  restore_global_gitignore
  popd >/dev/null || cd "${ROOT_DIR}" || exit 1
}

# Print step.
step() {
  # Using prefix different from command prefix in SUT for easy debug.
  echo "**> STEP: ${1}" >&3
}

# Print sub-step.
substep() {
  echo "     > ${1}" >&3
}

git_init() {
  local allow_receive_update="${1:-0}"
  local dir="${2:-$(pwd)}"

  assert_not_git_repo "${dir}"
  git --work-tree="${dir}" --git-dir="${dir}/.git" init >/dev/null

  if [ "${allow_receive_update:-}" -eq 1 ]; then
    git --work-tree="${dir}" --git-dir="${dir}/.git" config receive.denyCurrentBranch updateInstead >/dev/null
  fi
}

git_add_all_commit() {
  local message="${1}"
  local dir="${2:-$(pwd)}"

  assert_git_repo "${dir}"

  git --work-tree="${dir}" --git-dir="${dir}/.git" add -A
  git --work-tree="${dir}" --git-dir="${dir}/.git" commit -m "${message}" >/dev/null
  commit=$(git --work-tree="${dir}" --git-dir="${dir}/.git" rev-parse HEAD)
  echo "${commit}"
}

prepare_global_gitconfig() {
  git config --global init.defaultBranch >/dev/null || git config --global init.defaultBranch "main"
}

prepare_global_gitignore() {
  filename="${HOME}/.gitignore"
  filename_backup="${filename}".bak

  if git config --global --list | grep -q core.excludesfile; then
    git config --global core.excludesfile >/tmp/git_config_global_exclude
  fi

  [ -f "${filename}" ] && cp "${filename}" "${filename_backup}"

  cat <<EOT >"${filename}"
##
## Temporary files generated by various OSs and IDEs
##
Thumbs.db
._*
.DS_Store
.idea
.idea/*
*.sublime*
.project
.netbeans
.vscode
.vscode/*
nbproject
nbproject/*
EOT

  git config --global core.excludesfile "${filename}"
}

restore_global_gitignore() {
  filename=${HOME}/.gitignore
  filename_backup="${filename}".bak
  [ -f "${filename_backup}" ] && cp "${filename_backup}" "${filename}"
  [ -f "/tmp/git_config_global_exclude" ] && git config --global core.excludesfile "$(cat /tmp/git_config_global_exclude)"
}
