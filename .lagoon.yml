docker-compose-yaml: docker-compose.yml

# Inject the deployed Git SHA.
environment_variables:
  git_sha: 'true'

# Uncomment below to login into container registries if using private images.
# container-registries:
#  dockerhub:
#    username: <dockerhub username>
#    # Environment variable $DREVOPS_DOCKER_REGISTRY_TOKEN with Docker registry
#    # password is injected into container via LagoonCLI.
#    # @see https://docs.lagoon.sh/using-lagoon-advanced/environment-variables/#runtime-environment-variables-lagoon-api
#    password: DREVOPS_DOCKER_REGISTRY_TOKEN

tasks:
  post-rollout:
    - run:
        name: Set GitHub deployment status
        command: |
          if  [ -n "${DREVOPS_NOTIFY_GITHUB_TOKEN}" ] && [ -n "$LAGOON_PR_NUMBER" ]; then
            [ -n "$LAGOON_PR_NUMBER" ] && GIT_SHA=$LAGOON_PR_HEAD_SHA || GIT_SHA=$LAGOON_GIT_SHA
            DREVOPS_NOTIFY_DEPLOY_REPOSITORY="salsadigitalauorg/oni-osp" \
            DREVOPS_NOTIFY_DEPLOY_REF="$GIT_SHA" \
            DREVOPS_NOTIFY_DEPLOY_GITHUB_OPERATION="start" \
            ./scripts/drevops/notify-deployment-github.sh || true
          fi
        service: cli
        shell: bash

    - run:
        name: Backup DB before deployment in production
        command: |
          if [ "$LAGOON_ENVIRONMENT_TYPE" = "production" ] || [ "$LAGOON_GIT_BRANCH" = "$DREVOPS_PRODUCTION_BRANCH" ]; then
            DREVOPS_DB_DIR=/app/docroot/sites/default/files/private/pre_deployment_backups ./scripts/drevops/export-db-file.sh
          fi
        service: cli

    - run:
        name: Download database
        command: |
          #; If Lagoon is used as non-prod environment and the database is
          #; located elsewhere, we need to get access to that remote
          #; environmnent to download the database dump.
          #;
          #;< ACQUIA
          #: If source DB is in Acquia, we need to be able to use Cloud API
          #: to download the database dump. In order to do so, we need to
          #: provide Cloud API credentials in DREVOPS_ACQUIA_KEY and
          #: DREVOPS_ACQUIA_SECRET variables, which can be either set in your
          #: .env file and stored in the git repository (not the best practice)
          #: or using lagooncli as a project-wide variable.
          #;> ACQUIA

          # Store DB dump in temp location instead of '.data'.
          export DREVOPS_DB_DIR=/tmp/data

          # Do not load SSH file to access production environment to download
          # the DB as Lagoon already has the keys loaded into the SSH agent.
          export DREVOPS_DB_DOWNLOAD_SSH_KEY_FILE=false

          if [ "$LAGOON_ENVIRONMENT_TYPE" = "production" ] || [ "$LAGOON_GIT_BRANCH" = "$DREVOPS_PRODUCTION_BRANCH" ]; then
            echo "==> Skipping DB download in the production environment."
          else
            rm -Rf $DREVOPS_DB_DIR
            ./scripts/drevops/download-db.sh
          fi
        service: cli

    - run:
        name: Install site
        command: |
          # Read DB dump from the temp location instead of '.data'.
          export DREVOPS_DB_DIR=/tmp/data

          if [ "$LAGOON_ENVIRONMENT_TYPE" = "production" ] || [ "$LAGOON_GIT_BRANCH" = "$DREVOPS_PRODUCTION_BRANCH" ]; then
            # Never overwrite existing DB when production site already exists.
            export DREVOPS_DRUPAL_INSTALL_OVERRIDE_EXISTING_DB=0
            # Never unblock admin user in production.
            export DREVOPS_DRUPAL_LOGIN_UNBLOCK_ADMIN=0
            # Never sanitize DB.
            export DREVOPS_DRUPAL_INSTALL_DB_SANITIZE_SKIP=1
          fi

          # Install site.
          ./scripts/drevops/drupal-install-site.sh
        service: cli
        shell: bash

    - run:
        name: Send deployment notifications
        command: |
          [ -n "$LAGOON_PR_NUMBER" ] && GIT_REF=$LAGOON_PR_NUMBER || GIT_REF=$LAGOON_GIT_BRANCH
          php ./scripts/drevops/notify-deployment-email.php \
            "YOURSITE" \
            "lagoon-deploy@your-site-url.example" \
            "your.name@your-site-url.example|Your Name" \
            "$GIT_REF" \
            "$LAGOON_ROUTES"

          if [ "$NEWRELIC_ENABLED" = "1" ] && [ -n "$NEWRELIC_LICENSE" ] && [ -n "$DREVOPS_NOTIFY_NEWRELIC_APIKEY" ]; then
            [ -n "$LAGOON_PR_NUMBER" ] && GIT_SHA=$LAGOON_PR_HEAD_SHA || GIT_SHA=$LAGOON_GIT_SHA
            DREVOPS_NOTIFY_NEWRELIC_APP_NAME="$LAGOON_PROJECT-$GIT_SHA" \
            DREVOPS_NOTIFY_DEPLOY_REF="$GIT_SHA" \
            ./scripts/drevops/notify-deployment-newrelic.sh
          fi

          if [ -n "${DREVOPS_NOTIFY_GITHUB_TOKEN}" ] && [ -n "$LAGOON_PR_NUMBER" ]; then
            [ -n "$LAGOON_PR_NUMBER" ] && GIT_SHA=$LAGOON_PR_HEAD_SHA || GIT_SHA=$LAGOON_GIT_SHA
            DREVOPS_NOTIFY_DEPLOY_REPOSITORY="your_org/your_site" \
            DREVOPS_NOTIFY_DEPLOY_REF="$GIT_SHA" \
            DREVOPS_NOTIFY_DEPLOY_ENVIRONMENT_URL="$LAGOON_ROUTE" \
            DREVOPS_NOTIFY_DEPLOY_GITHUB_OPERATION="finish" \
            ./scripts/drevops/notify-deployment-github.sh || true
          fi

          if [ -n "${DREVOPS_NOTIFY_DEPLOY_JIRA_USER}" ] && [ -n "${DREVOPS_NOTIFY_DEPLOY_JIRA_TOKEN}" ]; then
            [ -n "$LAGOON_PR_NUMBER" ] && GIT_BRANCH=$LAGOON_PR_HEAD_BRANCH || GIT_BRANCH=$LAGOON_GIT_BRANCH
            DREVOPS_NOTIFY_JIRA_ENDPOINT="${DREVOPS_NOTIFY_JIRA_ENDPOINT:-https://jira.atlassian.com}" \
            DREVOPS_NOTIFY_DEPLOY_BRANCH="$GIT_BRANCH" \
            DREVOPS_NOTIFY_DEPLOY_ENVIRONMENT_URL="$LAGOON_ROUTE" \
            ./scripts/drevops/notify-deployment-jira.sh || true
          fi
        service: cli
        shell: bash

environments:
  # Branch name that represents production environment.
  master:
    cronjobs:
      - name: drush cron
        schedule: '*/15 * * * *'
        command: drush cron --root=/app
        service: cli
    # Uncomment below to enable installing a custom SSL certificate.
    # By default, Lagoon installs Let's Encrypt certificates for all environments.
    # routes:
    #   - nginx-php:
    #       - www.your-site-url.example:
    #           tls-acme: 'false'
    monitoring_urls:
      - www.your-site-url.example
  # Branch name that represents development environment.
  develop:
    cronjobs:
      - name: drush cron
        schedule: '*/15 * * * *'
        command: drush cron --root=/app
        service: cli
    # Uncomment below to enable installing a custom SSL certificate.
    # By default, Lagoon installs Let's Encrypt certificates for all environments.
    # routes:
    #   - nginx-php:
    #       - dev.your-site-url.example:
    #           tls-acme: 'false'
    monitoring_urls:
      - dev.your-site-url.example

routes:
  insecure: Redirect
