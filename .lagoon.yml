docker-compose-yaml: docker-compose.yml

tasks:
  post-rollout:
    #:
    #: Helper command to discover available variables. Remove in production.
    - run:
        name: env variables
        command: env
        service: cli

    - run:
        name: Download database
        command: |
          # Import variables from .env file.
          t=$(mktemp) && export -p > "$t" && set -a && . ./.env && set +a && . "$t" && rm "$t" && unset t
          # Store DB dump in temp location instead of '.data'.
          export DB_DIR=/tmp/data
          # Do not load SSH file to access master environment to download the
          # DB as Lagoon has the keys already loaded in the SSH agent.
          export LAGOON_SSH_KEY_FILE=false
          # Remove previously saved dumps in this environment.
          rm -Rf $DB_DIR
          # Download the database dump.
          ./scripts/drevops/download-db.sh
        service: cli

    - run:
        name: Install site
        command: |
          # Import variables from .env file.
          t=$(mktemp) && export -p > "$t" && set -a && . ./.env && set +a && . "$t" && rm "$t" && unset t
          # Read DB dump from the temp location instead of '.data'.
          export DB_DIR=/tmp/data
          # Do not sanitize DB.
          export SKIP_DB_SANITIZE=1

          if [ "$LAGOON_ENVIRONMENT_TYPE" == "production" ]; then
            # Never overwrite existing DB when production site already exists.
            export DB_IMPORT_OVERWRITE_EXISTING=0
            # Never unblock admin user in production.
            export DRUPAL_UNBLOCK_ADMIN=0
          else
            # Do not overwrite existing DB if non-production site already exists.
            # @note: Change this to 1 in order to re-install site on every commit.
            export DB_IMPORT_OVERWRITE_EXISTING=0
          fi

          # Install site.
          ./scripts/drevops/drupal-install-site.sh
        service: cli
        shell: bash

environments:
  master:
    types:
      mariadb: mariadb-shared
    cronjobs:
      - name: drush cron
        schedule: '*/15 * * * *'
        command: drush cron --root=/app
        service: cli
    routes:
      - nginx:
          - your-site-url:
              tls-acme: 'true'
          - www.your-site-url:
              tls-acme: 'false'
    monitoring_urls:
      - your-site-url
      - www.your-site-url
routes:
  insecure: Redirect
