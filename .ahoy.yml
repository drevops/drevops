---
ahoyapi: v2

commands:

  # Docker commands.
  build:
    usage: Build or rebuild project.
    cmd: |
      ahoy title "Building project"
      ahoy pre-flight
      ahoy clean
      (docker network prune -f > /dev/null && docker network inspect amazeeio-network > /dev/null || docker network create amazeeio-network)
      ahoy up -- --build --force-recreate
      (if [ "${BUILD_EXPORT_DIR}" != "" ]; then mkdir -p ${BUILD_EXPORT_DIR} && docker cp -L $(docker-compose ps -q cli):/app/. ${BUILD_EXPORT_DIR}; rm -Rf ${BUILD_EXPORT_DIR}/node_modules >/dev/null; fi)
      ahoy install-dev
      ahoy fe
      ahoy install-site
      ahoy title "Build complete"
      ahoy doctor
      ahoy info 1

  info:
    usage: Print information about this project.
    cmd: |
      ahoy line "Project                  : " ${PROJECT}
      ahoy line "Site local URL           : " http://${LOCALDEV_URL}
      ahoy line "Path to project          : " ${APP}
      ahoy line "Path to docroot          : " ${APP}/${WEBROOT}
      ahoy line "DB port on host          : " $(docker port $(docker-compose ps -q mariadb) 3306 | cut -d : -f 2)
      ahoy line "Livereload port on host  : " $(docker port $(docker-compose ps -q cli) 35729 | cut -d : -f 2)
      #;< SOLR
      ahoy line "Solr port on host        : " $(docker port $(docker-compose ps -q solr) 8983 | cut -d : -f 2)
      #;> SOLR
      ahoy line "Mailhog URL              : " http://mailhog.docker.amazee.io/
      ahoy line "Xdebug                   : " $(ahoy cli php -v|grep -q Xdebug && echo "Enabled" || echo "Disabled")
      if [ "$1" ]; then
        ahoy line "One-time login           : " $(ahoy login -- --no-browser)
      fi

  up:
    usage: Build and start Docker containers.
    cmd: |
      docker-compose up -d "$@"
      ahoy cli "dockerize -wait tcp://mariadb:3306 -timeout 1m"
      if docker-compose logs | grep -q "\[Error\]"; then docker-compose logs; exit 1; fi
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'
      docker ps -a --filter name=^/${COMPOSE_PROJECT_NAME}_
      export DOCTOR_CHECK_CLI=0

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: "if [ -f \"docker-compose.yml\" ]; then docker-compose down --volumes; fi"

  start:
    usage: Start existing Docker containers.
    cmd: |
      docker-compose start "$@"
      mkdir -p docroot/sites/default/files && docker-compose port cli 35729 | cut -d : -f 2 | xargs -I{} ahoy cli 'echo {} > /app/docroot/sites/default/files/livereload.sock'

  stop:
    usage: Stop running Docker containers.
    cmd: docker-compose stop "$@"

  restart:
    usage: Restart all stopped and running Docker containers.
    cmd: docker-compose restart

  logs:
    usage: Show Docker logs.
    cmd: docker-compose logs "$@"

  pull:
    usage: Pull latest docker images.
    cmd: if [ ! -z "$(docker image ls -q)" ]; then docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep amazeeio/ | grep -v none | xargs -n1 docker pull | cat; fi

  cli:
    usage: Start a shell inside CLI container or run a command.
    cmd: if \[ "${#}" -ne 0 \]; then docker exec -i $(docker-compose ps -q cli) bash -c "$*"; else docker exec -it $(docker-compose ps -q cli) bash; fi

  drush:
    usage: Run drush commands in the CLI service container.
    cmd: docker exec -i $(docker-compose ps -q cli) drush -r ${APP}/${WEBROOT} -l ${LOCALDEV_URL} "$@"

  # Application commands.
  login:
    usage: Login to a website.
    cmd: ahoy drush uublk 1 -q && ahoy drush uli "$@"

  doctor:
    usage: Find problems with current project setup.
    cmd: scripts/doctor.sh "$@"

  #;< !FRESH_INSTALL
  download-db:
    usage: Download database.
    cmd: |
      ahoy title "Downloading database"
      #;< DEMO: Download dummy DB.
      #; Used for demonstration purposes. This line is removed during project installation.
      mkdir -p ${DATAROOT} && curl -L ${DEMO_DB} -o ${DATAROOT}/db.sql
      #;> DEMO
      #;< ACQUIA
      # Download DB from Acquia Cloud backup. Remove if site install is used.
      ##### AC_API_USER_NAME=${AC_API_USER_NAME} AC_API_USER_PASS=${AC_API_USER_PASS} AC_API_DB_SITE=${AC_API_DB_SITE} AC_API_DB_ENV=${AC_API_DB_ENV} AC_API_DB_NAME=${AC_API_DB_NAME} DB_REMOVE_CACHED_DUMPS=${DB_REMOVE_CACHED_DUMPS} ./scripts/download-backup-acquia.sh
      #;> ACQUIA
      #;< FTP
      # Download DB dump from FTP. Remove if site install is used.
      ##### mkdir -p ${DATAROOT} && curl -u ${FTP_USER}:${FTP_PASS} "ftp://${FTP_HOST}:${FTP_PORT}/${FTP_FILE}" -o ${DATAROOT}/db.sql
      #;> FTP
  #;> !FRESH_INSTALL

  install-site:
    usage: Install a site.
    cmd: |
      #;< !FRESH_INSTALL \
      ahoy title "Installing site from the existing database dump"
      if [ "$DB_EXPORT_BEFORE_IMPORT" != "0" ]; then ahoy export-db; fi
      ahoy import-db-dump
      if [ "${SKIP_SANITIZE_DB}" != "1" ]; then ahoy sanitize-db "${site}"; fi
      {
        if [ "${SKIP_POST_IMPORT}" != "1" ]; then
          ahoy drush en your_site_core -y
          ahoy drush updb -y
          if ls config/default/*.yml > /dev/null 2>&1; then ahoy title "Importing configuration" && ahoy drush cim -y; fi
        fi
      }
      #;> !FRESH_INSTALL \
      #;< FRESH_INSTALL \
      ahoy title "Installing a fresh site from ${DRUPAL_PROFILE} profile"
      ahoy drush si "${DRUPAL_PROFILE}" -y --account-name=admin --site-name="YOURSITE" install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL
      ahoy drush en -y your_site_core
      if ls config/default/*.yml > /dev/null 2>&1; then ahoy title "Importing configuration" && ahoy drush cim -y; fi
      #;> FRESH_INSTALL \
      ahoy drush cr

  import-db-dump:
    usage: Import database dump.
    cmd: |
      ahoy drush sql-drop -y
      ahoy cli "mkdir -p /tmp/.data"
      docker cp -L ${DATAROOT}/db.sql $(docker-compose ps -q cli):/tmp/.data/db.sql
      docker-compose exec cli bash -c "pv /tmp/.data/db.sql | drush -r ${APP}/${WEBROOT} sql-cli"
    hide: true

  export-db:
    usage: Export database dump.
    cmd: |
      ahoy cli "mkdir -p /tmp/.data"
      ahoy drush sql-dump --skip-tables-key=common --result-file=/tmp/.data/db.sql -q
      mkdir -p ${DATAROOT}
      DUMP_FILE=$([ "${1}" ] && echo ${DATAROOT}/${1} || echo ${DATAROOT}/db_export_$(date +%Y_%m_%d_%H_%M_%S).sql)
      docker cp -L $(docker-compose ps -q cli):/tmp/.data/db.sql ${DUMP_FILE}
      [ -f "${DUMP_FILE}" ] && ahoy title "Dump saved to file ${DUMP_FILE}"

  sanitize-db:
    usage: Sanitize database.
    cmd: |
      ahoy drush sql-sanitize --sanitize-password=password --sanitize-email=user+%uid@localhost -y
      if [ "${DB_SANITIZE_SQL}" != "" ] && [ -f "${DB_SANITIZE_SQL}" ]; then
        ahoy title "Applying custom sanitization commands"
        ahoy cli "mkdir -p $(dirname /tmp/${DB_SANITIZE_SQL})"
        docker cp -L ${DB_SANITIZE_SQL} $(docker-compose ps -q cli):/tmp/${DB_SANITIZE_SQL}
        ahoy drush sql-query --file=/tmp/${DB_SANITIZE_SQL}
      fi
    hide: true

  clean:
    usage: Remove containers and all build files.
    cmd: |
      ahoy down
      rm -rf \
        ./vendor \
        ./node_modules \
        ./docroot/core \
        ./docroot/profiles/contrib \
        ./docroot/modules/contrib \
        ./docroot/themes/contrib \
        ./docroot/themes/custom/*/build \
        ./docroot/themes/custom/*/scss/_components.scss \
        ./docroot/sites/default/settings.generated.php

  reset:
    usage: "Reset environment: remove containers, all build, manually created and Drupal-Dev files."
    cmd: |
      ahoy clean
      rm -rf ./screenshots;
      git ls-files --others -i --exclude-from=.git/info/exclude | xargs chmod 777 || true
      git ls-files --others -i --exclude-from=.git/info/exclude | xargs rm -Rf || true
      find . -type d -not -path "./.git/*" -empty -delete

  fe:
    usage: Build front-end assets.
    cmd: ahoy cli "npm run build"

  fed:
    usage: Build front-end assets for development.
    cmd: ahoy cli "npm run build-dev"

  few:
    usage: Watch front-end assets during development.
    cmd: ahoy cli "npm run watch"

  install-dev:
    usage: Install dependencies.
    cmd: |
      if [ -d .data ]; then docker cp -L .data $(docker-compose ps -q cli):/app/; fi
      docker cp -L behat.yml $(docker-compose ps -q cli):/app/
      docker cp -L tests $(docker-compose ps -q cli):/app/
      docker cp -L phpcs.xml $(docker-compose ps -q cli):/app/
      ahoy cli "composer install -n --ansi --prefer-dist --no-suggest"
      ahoy cli "npm install"
    hide: true

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker exec -i $(docker-compose ps -q redis) redis-cli flushall > /dev/null

  lint:
    usage: Lint all code.
    cmd: ahoy lint-be && ahoy lint-fe

  lint-be:
    usage: Lint back-end code.
    cmd: |
      ahoy cli "vendor/bin/parallel-lint --exclude vendor --exclude node_modules -e ${PHP_LINT_EXTENSIONS} ${PHP_LINT_TARGETS//,/ }" && \
      ahoy cli "vendor/bin/phpcs -v ${PHPCS_TARGETS//,/ }" || \
      [ "${ALLOW_LINT_FAIL:-0}" -eq 1 ]

  lint-fe:
    usage: Lint front-end code.
    cmd: |
      ahoy cli "npm run lint" || \
      [ "${ALLOW_LINT_FAIL:-0}" -eq 1 ]

  test:
    usage: Run all tests.
    cmd: |
      ahoy test-unit
      ahoy test-kernel
      ahoy test-functional
      ahoy test-bdd

  test-unit:
    usage: Run Simpletest unit tests.
    cmd: ahoy cli "vendor/bin/phpunit -c /app/docroot/core/phpunit.xml.dist docroot/modules/custom/ --filter '/.*Unit.*/' $@" || [ "${ALLOW_SIMPLETEST_TESTS_FAIL:-0}" -eq 1 ]

  test-kernel:
    usage: Run Simpletest kernel tests.
    cmd: ahoy cli "vendor/bin/phpunit -c /app/docroot/core/phpunit.xml.dist docroot/modules/custom/ --filter '/.*Kernel.*/' $@" || [ "${ALLOW_SIMPLETEST_TESTS_FAIL:-0}" -eq 1 ]

  test-functional:
    usage: Run Simpletest functional tests.
    cmd: ahoy cli "vendor/bin/phpunit -c /app/docroot/core/phpunit.xml.dist docroot/modules/custom/ --filter '/.*Functional.*/' $@" || [ "${ALLOW_SIMPLETEST_TESTS_FAIL:-0}" -eq 1 ]

  test-bdd:
    usage: Run BDD tests.
    cmd: ahoy cli "./vendor/bin/behat --strict --colors ${BEHAT_PROFILE} $@" || [ "${ALLOW_BEHAT_FAIL:-0}" -eq 1 ]

  debug:
    usage: Enable debug configuration.
    cmd: |
      { ahoy cli php -v|grep -q Xdebug && ahoy title "Debug is already enabled"; } \
      || { export XDEBUG_ENABLE="true" && ahoy up && ahoy cli php -v|grep -q Xdebug && ahoy title "Enabled debug configuration. Use 'ahoy up' to disable."; }

  update:
    usage: Update development stack.
    cmd: |
      ahoy confirm "Some committed files may become overwritten. Proceed?" \
        && export DRUPALDEV_ALLOW_OVERRIDE=1 \
        && export DRUPALDEV_COMMIT=${DRUPALDEV_COMMIT:-} \
        && if [ ! -z "${DRUPALDEV_INSTALL_SCRIPT+x}" ] && [ -f "${DRUPALDEV_INSTALL_SCRIPT}" ]; then bash ${DRUPALDEV_INSTALL_SCRIPT} "$@"; else bash <(curl -L https://raw.githubusercontent.com/integratedexperts/drupal-dev/${DRUPAL_VERSION}.x/install.sh?"$(date +%s)") "$@"; fi \
        || true

  # Utilities.
  confirm:
    cmd: read -r -p "${@} [y/N] " response; [ ${response} = "y" ]
    hide: true

  title:
    cmd: printf "$(tput -Txterm setaf 4)==> ${1}$(tput -Txterm sgr0)\n"
    hide: true

  line:
    cmd: printf "$(tput -Txterm setaf 2)${1}$(tput -Txterm sgr0)${2}\n"
    hide: true

  getvar:
    cmd: eval echo "${@}"
    hide: true

  pre-flight:
    cmd: |
      export DOCTOR_CHECK_DB=${DOCTOR_CHECK_DB:-1}
      export DOCTOR_CHECK_TOOLS=${DOCTOR_CHECK_TOOLS:-1}
      export DOCTOR_CHECK_PORT=${DOCTOR_CHECK_PORT:-1}
      export DOCTOR_CHECK_PYGMY=${DOCTOR_CHECK_PYGMY:-1}
      export DOCTOR_CHECK_CLI=${DOCTOR_CHECK_CLI:-0}
      export DOCTOR_CHECK_SSH=${DOCTOR_CHECK_SSH:-0}
      export DOCTOR_CHECK_WEBSERVER=${DOCTOR_CHECK_WEBSERVER:-0}
      export DOCTOR_CHECK_BOOTSTRAP=${DOCTOR_CHECK_BOOTSTRAP:-0}
      ahoy doctor
    hide: true

entrypoint:
  - bash
  - "-c"
  - "-e"
  - |
    [ -f .env ] && [ -s .env ] && export $(grep -v '^#' .env | xargs) && if [ -f .env.local ] && [ -s .env.local ]; then export $(grep -v '^#' .env.local | xargs); fi
    #;< DEMO
    #; Location of the demo database used for demonstration only.
    #; This will be removed during project install.
    export DEMO_DB="${DEMO_DB:-https://raw.githubusercontent.com/wiki/integratedexperts/drupal-dev/db_d8.dist.sql.md}"
    #; Location of the demo database used for tests only.
    export DEMO_DB_TEST="${DEMO_DB_TEST:-https://raw.githubusercontent.com/wiki/integratedexperts/drupal-dev/db_d8.star_wars.sql.md}"
    #;> DEMO
    #;< FRESH_INSTALL
    export DOCTOR_CHECK_DB=0
    #;> FRESH_INSTALL
    bash -e -c "$0" "$@"
  - '{{cmd}}'
  - '{{name}}'
