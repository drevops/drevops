---
ahoyapi: v2

commands:

  # Docker commands.
  build:
    usage: Build or rebuild project.
    cmd: |
      ahoy title "Building project" \
      && ahoy clean \
      && (docker network prune -f > /dev/null && docker network inspect amazeeio-network > /dev/null || docker network create amazeeio-network) \
      && ahoy up -- --build --force-recreate \
      && if [ "${BUILD_EXPORT_DIR}" != "" ]; then mkdir -p ${BUILD_EXPORT_DIR} && docker cp -L $(docker-compose ps -q cli):/app/. ${BUILD_EXPORT_DIR}; fi \
      && ahoy install-dev \
      && ahoy install-site \
      && ahoy title "Build complete" \
      && ahoy info 1

  info:
    usage: Print information about this project.
    cmd: |
      ahoy line "Project               : " ${PROJECT}
      ahoy line "Site URL              : " ${LOCALDEV_URL}
      ahoy line "Path to project       : " ${APP}
      ahoy line "Path to docroot       : " ${APP}/${WEBROOT}
      ahoy line "DB port on host       : " $(docker port $(docker-compose ps -q mariadb) 3306 | cut -d : -f 2)
      #< SOLR
      ahoy line "Solr port on host     : " $(docker port $(docker-compose ps -q solr) 8983 | cut -d : -f 2)
      #> SOLR
      ahoy line "Mailhog URL           : " http://mailhog.docker.amazee.io/
      if [ "$1" ]; then
        ahoy line "One-time login        : " $(ahoy login -- --no-browser)
      fi

  up:
    usage: Build and start Docker containers.
    cmd: |
      docker-compose up -d "$@" \
      && ahoy cli "dockerize -wait tcp://mariadb:3306 -timeout 1m" \
      && if docker-compose logs | grep -q "\[Error\]"; then docker-compose logs; exit 1; fi \
      && docker ps -a --filter name=^/${COMPOSE_PROJECT_NAME}_

  down:
    usage: Stop Docker containers and remove container, images, volumes and networks.
    cmd: docker-compose down --volumes

  start:
    usage: Start existing Docker containers.
    cmd: docker-compose start "$@"

  stop:
    usage: Stop running Docker containers.
    cmd: docker-compose stop "$@"

  restart:
    usage: Restart all stopped and running Docker containers.
    cmd: docker-compose restart

  logs:
    usage: Show Docker logs.
    cmd: docker-compose logs "$@"

  pull:
    usage: Pull latest docker images.
    cmd: docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep amazeeio/ | grep -v none | xargs -n1 docker pull | cat

  cli:
    usage: Start a shell inside CLI container or run a command.
    cmd: if \[ "$@" \]; then docker exec -i $(docker-compose ps -q cli) bash -c "$@"; else docker exec -it $(docker-compose ps -q cli) bash; fi

  drush:
    usage: Run drush commands in the CLI service container.
    cmd: docker exec -i $(docker-compose ps -q cli) drush -r ${APP}/${WEBROOT} -l ${LOCALDEV_URL} "$@"

  # Application commands.
  login:
    usage: Login to a website.
    cmd: ahoy drush uublk 1 -q && ahoy drush uli "$@"

  doctor:
    usage: Find problems with current project setup.
    cmd: scripts/doctor.sh

  download-db:
    usage: Download database.
    cmd: |
      ahoy title "Downloading database"
      #< DEMO: Download dummy DB.
      #| Used for demonstration purposes. This line is removed during project init.
      mkdir -p ${DATAROOT} && curl -L ${DUMMY_DB} -o ${DATAROOT}/db.sql
      #> DEMO
      #< ACQUIA
      # Download DB from Acquia Cloud backup. Remove if site install is used.
      ##### AC_API_USER_NAME=${AC_API_USER_NAME} AC_API_USER_PASS=${AC_API_USER_PASS} AC_API_DB_SITE=${AC_API_DB_SITE} AC_API_DB_ENV=${AC_API_DB_ENV} AC_API_DB_NAME=${AC_API_DB_NAME} DB_REMOVE_CACHED_DUMPS=${DB_REMOVE_CACHED_DUMPS} ./scripts/download-backup-acquia.sh
      #> ACQUIA
      #< FTP
      # Download DB dump from FTP. Remove if site install is used.
      ##### mkdir -p ${DATAROOT} && curl -u ${FTP_USER}:${FTP_PASS} "ftp://${FTP_HOST}:${FTP_PORT}/${FTP_FILE}" -o ${DATAROOT}/db.sql
      #> FTP

  install-site:
    usage: Install a site.
    cmd: |
      ahoy title "Importing database from the dump"
      [ "$DB_EXPORT_BEFORE_IMPORT" != "0" ] && ahoy export-db
      ahoy import-db-dump
      ahoy sanitize-db
      ahoy drush en mysite_core -y
      ahoy drush updb -y
      #< PROFILE
      #| Replace lines above with lines below if you want to install site from profile.
      #| ahoy title "Installing a site from profile"
      #| ahoy drush si ${DRUPAL_PROFILE} -y --account-name=admin --site-name="MYSITE" install_configure_form.enable_update_status_module=NULL install_configure_form.enable_update_status_emails=NULL
      #| ahoy drush en -y mysite_core
      #> PROFILE
      #| Only import configuration if at least one config file exists.
      [ -f config/default/*.yml ] && ahoy drush cim -y || true
      ahoy drush cr

  import-db-dump:
    usage: Import database dump.
    cmd: |
      ahoy drush sql-drop -y
      ahoy cli "mkdir -p /tmp/.data"
      docker cp -L ${DATAROOT}/db.sql $(docker-compose ps -q cli):/tmp/.data/db.sql
      ahoy cli "bash -c \"drush -r ${APP}/${WEBROOT} sql-cli < /tmp/.data/db.sql\""
    hide: true

  export-db:
    usage: Export database dump.
    cmd: |
      ahoy cli "mkdir -p /tmp/.data"
      ahoy drush sql-dump --skip-tables-key=common --result-file=/tmp/.data/db.sql -q
      mkdir -p ${DATAROOT}
      DUMP_FILE=$([ "${1}" ] && echo ${DATAROOT}/${1} || echo ${DATAROOT}/db_export_$(date +%Y_%m_%d_%H_%M_%S).sql)
      docker cp -L $(docker-compose ps -q cli):/tmp/.data/db.sql ${DUMP_FILE}
      [ -f "${DUMP_FILE}" ] && ahoy title "Dump saved to file ${DUMP_FILE}"

  sanitize-db:
    usage: Sanitize database.
    cmd: |
      ahoy drush sql-sanitize --sanitize-password=password --sanitize-email=user+%uid@localhost -y
      if [ "${DB_SANITIZE_SQL}" != "" ] && [ -f "${DB_SANITIZE_SQL}" ]; then
        ahoy title "Applying custom sanitization commands"
        ahoy cli "mkdir -p $(dirname /tmp/${DB_SANITIZE_SQL})"
        docker cp -L ${DB_SANITIZE_SQL} $(docker-compose ps -q cli):/tmp/${DB_SANITIZE_SQL}
        ahoy drush sql-query --file=/tmp/${DB_SANITIZE_SQL}
      fi
    hide: true

  clean:
    usage: Remove all build files.
    cmd: |
      ahoy down \
      && ([ -d .git ] && git ls-files --directory --other -i --exclude-from=.gitignore ${WEBROOT} | grep -v "settings.local.php" | grep -v "services.local.yml" | xargs chmod -Rf 777 || true) \
      && ([ -d .git ] && git ls-files --directory --other -i --exclude-from=.gitignore ${WEBROOT} | grep -v "settings.local.php" | grep -v "services.local.yml" | xargs rm -Rf || true) \
      && rm -Rf vendor \
      rm -Rf node_modules \
      && rm -Rf screenshots

  clean-full:
    usage: Remove all development files.
    cmd: |
      ahoy clean \
      && ([ -d .git ] && git ls-files --directory --other . | grep -v ".idea" | xargs chmod -Rf 777 || true) \
      && ([ -d .git ] && git ls-files --directory --other . | grep -v ".idea" | xargs rm -Rf || true)

  fe:
    usage: Build front-end assets.
    cmd: ahoy cli "npm run build"

  fed:
    usage: Build front-end assets for development.
    cmd: ahoy cli "npm run build-dev"

  few:
    usage: Watch front-end assets during development.
    cmd: ahoy cli "npm run watch"

  install-dev:
    usage: Install dependencies.
    cmd: |
      docker cp -L .data $(docker-compose ps -q cli):/app/
      docker cp -L behat.yml $(docker-compose ps -q cli):/app/
      docker cp -L tests $(docker-compose ps -q cli):/app/
      docker cp -L phpcs.xml $(docker-compose ps -q cli):/app/
      ahoy cli "composer install -n --ansi --prefer-dist --no-suggest"
      ahoy cli "npm install"
    hide: true

  flush-redis:
    usage: Flush Redis cache.
    cmd: docker exec -i $(docker-compose ps -q redis) redis-cli flushall > /dev/null

  lint:
    usage: Lint code.
    cmd: |
      ahoy cli "vendor/bin/parallel-lint --exclude vendor --exclude node_modules -e ${PHP_LINT_EXTENSIONS} ${PHP_LINT_TARGETS//,/ }" \
      && ahoy cli "vendor/bin/phpcs -v ${PHPCS_TARGETS//,/ }" \
      && ahoy cli "npm run lint"

  test:
    usage: Run all tests.
    cmd: |
      ahoy test-phpunit
      ahoy test-behat

  test-behat:
    usage: Run Behat tests.
    cmd: ahoy cli "./vendor/bin/behat --strict --colors ${BEHAT_PROFILE} $@"

  test-phpunit:
    usage: Run PHPUnit tests.
    # @todo: Implement this.
    cmd: ahoy cli "echo Not implemented"
  #< DEMO
  init:
    usage: Initialise project.
    cmd: . .drupal-dev/init.sh "$@"
  #> DEMO

  # Utilities.
  confirm:
    cmd: read -r -p "{{args}} [y/N] " response; if [ $response = y ]; then true; else false; fi
    hide: true

  title:
    cmd: printf "$(tput -Txterm setaf 2)==> ${1}$(tput -Txterm sgr0)\n"
    hide: true

  line:
    cmd: printf "$(tput -Txterm setaf 2)${1}$(tput -Txterm sgr0)${2}\n"
    hide: true

entrypoint:
  - bash
  - "-c"
  - |
    [ -f .env ] && export $(grep -v '^#' .env | xargs) && [ -f .env.local ] && export $(grep -v '^#' .env.local | xargs)
    export PROJECT=${PROJECT:-$(basename $(pwd))}
    export LOCALDEV_URL=${LOCALDEV_URL:-http://${PROJECT/[_ ]/-}.docker.amazee.io}
    #< DEMO
    #| Location of the dummy database used for demonstration only.
    #| This will be removed during project init.
    export DUMMY_DB=https://goo.gl/bdZ2Zj
    #> DEMO
    bash -c "$0" "$@"
  - '{{cmd}}'
  - '{{name}}'
