# YAML supports anchors and references.
# @see http://blog.daemonl.com/2016/02/yaml.html
version: 2

references:
  workspace_root: &workspace_root
    /home/circleci/project

  code_root: &code_root
    code

  data_root: &data_root
    data

  dependencies_cache_key: &dependencies_cache_key
    v2-dependencies-{{ checksum "composer.json" }}-{{ epoch }}

  dependencies_cache_key_any: &dependencies_cache_key_any
    v2-dependencies-{{ checksum "composer.json" }}

  # Configuration shared between all containers.
  container_config: &container_config
    docker:
      - image: circleci/php:7.0-cli

    working_directory: *workspace_root

    environment:
      WORKSPACE_ROOT: *workspace_root
      CODE_ROOT: *code_root
      DATA_ROOT: *data_root

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  code_dependencies:
    <<: *container_config

    working_directory: /home/circleci/project/code

    environment:
      DOCROOT: docroot

    steps:
      # @debug
      - run: printenv

      - checkout
      # @debug
      - run: test -d $DOCROOT/sites

      - restore_cache:
          keys:
            - *dependencies_cache_key_any

      - run:
          name: Install dependencies
          command: composer install -n --prefer-dist

      - save_cache:
          paths:
            - ~/.composer/cache
          key: *dependencies_cache_key

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *code_root

      # Validate step results.
      # @debug
      - run: test -d ~/.composer/cache
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php

  # Download DB.
  download_db:
    <<: *container_config

    steps:
      - restore_cache:
          keys:
            - v1-data-{{ .Branch }}

      # Download DB dump from public URL to test Drupal-dev project/build.
      # Remove the line below in your project/build.
      - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -L https://goo.gl/WFtJbT -o $DATA_ROOT/db.dist.sql; fi
      # [META] Uncomment the line below to download DB dump from FTP, using
      # variables set in Circle CI UI.
      # - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -u $FTP_USER:$FTP_PASS "ftp://$FTP_HOST/db.dist.sql" -o $DATA_ROOT/db.dist.sql; fi

      - save_cache:
          paths:
            - *data_root
          key: v1-data-{{ .Branch }}

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *data_root

      # Validate step results.
      # @debug
      - run: test -f /home/circleci/project/data/db.dist.sql

  # Code style checking.
  # Fail fast if code style is incorrect.
  code_style:
    <<: *container_config

    steps:
      - *attach_workspace


      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -f /home/circleci/project/data/db.dist.sql

      - run: echo "LINT1"

      - run: test -d /home/circleci/project/code
      - run: test -d /home/circleci/project/data
#
#  # code.
#  code:
#    docker:
#      - image: circleci/php:7.1-apache
#        environment:
#          MYSQL_HOST: 127.0.0.1
#
#      - image: mysql:5.7
#        environment:
#          MYSQL_USER: ubuntu
#          MYSQL_PASSWORD: ubuntu
#          MYSQL_DATABASE: circle_test
#          MYSQL_ROOT_PASSWORD: ubuntu
#          MYSQL_ALLOW_EMPTY_PASSWORD: true
#          MYSQL_ROOT_HOST: "127.0.0.1"
#
#    steps:
#      - run:
#          name: Install additional binaries
#          command: |
#            sudo apt-get -y install vim mysql-client libpng-dev
#      - run:
#          name: Install PHP extensions
#          command: |
#            sudo docker-php-ext-install pdo_mysql
#            sudo docker-php-ext-install gd
#
#      - run:
#          name: Display versions
#          command: |
#            php -v
#            composer -v
#            composer config --global --list
#
#
#      - run: echo 'export PATH=~/.composer/vendor/bin:$PATH' >> $BASH_ENV
#
#      - attach_code:
#          at: /home/circleci
#
#      # Install drush.
#      - run: composer global require --no-interaction drush/drush
#
#      # Create local drush alias to make sure that composer code, which relies
#      # on aliases when importing DB, work correctly.
#      - run:
#          name: Create local drush alias
#          command: mkdir -p $HOME/.drush && echo "<?php \$aliases['$SERVER'] = ['uri' => '$SERVER', 'root' => '$DOCROOT_DIR'];" > $HOME/.drush/$SERVER.aliases.drushrc.php && drush sa && cat $HOME/.drush/$SERVER.aliases.drushrc.php
#          environment:
#            SERVER: local.mysiteurl
#            DOCROOT_DIR: code/docroot
#
#      # @debug
#      - run: cat docroot/sites/default/settings.beetbox.php
#
#      # Run actual project/code code.
#      - run: composer code
#
#      # Check that Drupal can be bootstrapped after updates.
#      - run: drush status --root=$DOCROOT_DIR | grep -aqoi "Drupal bootstrap\s*:\s*Successful"
#
#  # Run tests.
#  test_behat:
#    docker:
#      - image: circleci/php:7.0-cli
#
#    steps:
#      - run: echo "Placeholder for Behat test runner"
#
#  # Deploy primary branches.
#  deploy_primary:
#    machine: true
#    steps:
#      - run: echo "Running deployment command for 'primary' branches"
#
#  # Deploy feature branches.
#  deploy_features:
#    machine: true
#    steps:
#      - run: echo "Running deployment command for 'feature' branches"

workflows:
  version: 2

  cs_and_code_and_test:
    jobs:
      - code_dependencies
      - download_db
      - code_style:
          requires:
            - code_dependencies
            - download_db
#      - code:
#          requires:
#            - code_dependencies
#            - download_db
#            - code_style
#      - test_behat:
#          requires:
#            - code
#      - deploy_primary:
#          requires:
#            - test_behat
#          filters:
#            branches:
#              only: /master|develop|ci|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?/
#      - deploy_features:
#          requires:
#            - test_behat
#          filters:
#            branches:
#              only: /feature\/[a-zA-z0-9\-]+/
