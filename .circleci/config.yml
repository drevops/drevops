#|
#| CircleCI 2.0 configuration file.
#|
#| All tasks are extracted into scripts located in `.circleci` directory.
#| This is to allow per-project override for a particular job without
#| the need to modify this configuration file.
#|
#| Comments starting with '#|', '#<' or '#>' (like the ones used for the
#| current paragraph) are explaining Drupal-Dev inner working and can be safely
#| removed for your project. They are automatically removed when installing
#| Drupal-Dev.
version: 2
aliases:
  # Variables.
  # For YAML support of anchors and references, @see http://blog.daemonl.com/2016/02/yaml.html

  # SSH key fingerprint to deploy code. Add private key of the user who is
  # allowed to push to $DEPLOY_REMOTE repo under "SSH Permissions" in
  # CircleCI UI.
  #|
  #| This is a fingerprint of the key to push Drupal-Dev project itself.
  #| Replace this key fingerprint with your own.
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  # Shared configuration applied to each job.
  - &container_config
    working_directory: /app
    environment:
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      #| Using "runner" container where each job will be executed. This container
      #| has all necessary tools to run dockerized environment.
      #| @see https://github.com/integratedexperts/ci-builder
      - image: integratedexperts/ci-builder
        environment:
          # How often to refresh the cache of DB dump. Refer to `date` command.
          DB_TIMESTAMP: +%Y_%m_%d
          #| Volumes mounting to host is not supported in CircleCI.
          VOLUMES_MOUNTED: 0
    # Use large resource class for faster builds.
    # Uncomment the line below if your account has this option configured.
    # resource_class: xlarge

  # Step to setup remote docker.
  - &step_setup_remote_docker
    #< CI_NO_DLC
      setup_remote_docker
    #> CI_NO_DLC
    #< CI_DLC
    # Uncomment lines below if your CircleCI plan supports docker layer caching.
    # Docker Layer Caching allows to significantly speed up builds by caching
    # images built during previous runs.
    # @see https://circleci.com/docs/2.0/docker-layer-caching/
    # setup_remote_docker:
    #   docker_layer_caching: true
    #> CI_DLC

jobs:
  #| Database handling is a first step of the build.
  #|
  #| $DB_TIMESTAMP is used to determine if a fresh DB dump should be downloaded
  #| for the current build. Usually, a daily database dump is sufficient for
  #| development activities.
  #|
  #| Set DB_SANITIZE variable to `1` in Circle CI UI to sanitize DB using
  #| standard drush sanitization. You may also use custom SQL script to add more
  #| sanitization steps by setting $DB_SANITIZE_SQL variable to the path of this
  #| script.
  database:
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - run:
          name: Set timestamp for database caching
          command: echo "$(date ${DB_TIMESTAMP})" > /tmp/DB_TIMESTAMP && cat /tmp/DB_TIMESTAMP
      - restore_cache:
          keys:
            - v1-db8-{{ checksum "/tmp/DB_TIMESTAMP" }}
      - run: .circleci/download-db.sh
      - save_cache:
          key: v1-db8-{{ checksum "/tmp/DB_TIMESTAMP" }}
          paths:
            - .data

  #| Build and test is a second step of the build. The testing is performed
  #| within the same job to save time on provisioning during the job.
  build:
    <<: *container_config
    parallelism: 2
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - restore_cache:
          keys:
            - v1-db8-
      - run: .circleci/build.sh
      - run: .circleci/test.sh
      - run:
          name: Copy artifacts
          command: .circleci/test-artifacts.sh
          when: always
      - store_artifacts:
          path: /tmp/artifacts
          when: always
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  # Deploy primary branches.
  deploy: &job_deploy
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - run: .circleci/deploy.sh
      - store_artifacts:
          path: /tmp/artifacts

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - run: DEPLOY_BRANCH="deployment/[tags:-]" .circleci/deploy.sh
      - store_artifacts:
          path: /tmp/artifacts

  #< DRUPAL-DEV
  #| Test suite for Drupal-Dev.
  drupal_dev_test:
    <<: *container_config
    steps:
      - checkout
      - *step_setup_remote_docker
      - run: git config --global user.email "$DEPLOY_USER_EMAIL" && git config --global user.name "$DEPLOY_USER_NAME"
      - run: scripts/lint-scripts.sh
      - run: scripts/check-spell.sh
      - run: bats tests/bats/helpers.bats --tap
      - run: bats tests/bats/install.bats --tap
      - run: bats tests/bats/workflow.bats --tap

  drupal_dev_test_artefact:
    <<: *container_config
    steps:
      - checkout
      - *step_setup_remote_docker
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - attach_workspace:
          at: /workspace
      - run: bats tests/bats/artefact.bats --tap

  # Deployment of feature branches and tags for Drupal-Dev itself.
  drupal_dev_deploy:
    <<: *job_deploy

  drupal_dev_deploy_tags:
    <<: *job_deploy_tags
  #> DRUPAL-DEV
workflows:
  version: 2
  main:
    jobs:
      - database:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - database
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - master, develop, ci, cisomething
              # - release/123, release/123.456, release/123.456.789, release/123.456.789-rc123
              # - hotfix/123, hotfix/123.456, hotfix/123.456.789
              # - feature/description, feature/123-description, but not feature/8.x-description or feature/7.x-description
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/(?!7.x-|8.x-)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags: 1, 123, 123.456, 123.456.789, 123.456.789-rc123
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)$/

      #< DRUPAL-DEV
      #| Feature and tag deployment for Drupal-Dev itself. Remove the code below in your project.
      - drupal_dev_test:
          filters:
            tags:
              only: /.*/
      - drupal_dev_test_artefact:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - drupal_dev_deploy:
          requires:
            - build
            - drupal_dev_test
          filters:
            branches:
              # Allowed branches: 7.x, 8.x, feature/7.x-description, feature/8.x-description
              only: /(?:7|8)\.x|feature\/(?:7|8)\.x[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - drupal_dev_deploy_tags:
          requires:
            - build
            - drupal_dev_test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(?:7|8)\.x\-[0-9]+\.[0-9]+(?:[A-z0-9\-])*$/
      #> DRUPAL-DEV
