version: 2
jobs:
  build_dependencies:
    docker:
      - image: circleci/php:7.0-cli

    steps:
      - run: mkdir -p /home/circleci/project/build
      - run: touch /home/circleci/project/build/build.txt

      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - build

      - run: ls -al /home/circleci/project

  # Download DB.
  download_db:
    machine: true

    steps:
      - run: mkdir -p /home/circleci/project/.data
      - run: touch /home/circleci/project/.data/.data.txt
      - persist_to_workspace:
          root: /home/circleci/project
          paths:
            - .data

      - run: ls -al /home/circleci/project

  # Code style checking.
  # Fail fast if code style is incorrect.
  code_style:

    docker:
      - image: circleci/php:7.0-cli

    steps:
      - run: ls -al /home/circleci
      - run: ls -al /home/circleci/project

      - attach_workspace:
          at: /home/circleci/project

      - run: ls -al /home/circleci/project
      - run: ls -al /home/circleci/project/build
      - run: ls -al /home/circleci/project/.data
#
#  # Build.
#  build:
#    docker:
#      - image: circleci/php:7.1-apache
#        environment:
#          MYSQL_HOST: 127.0.0.1
#
#      - image: mysql:5.7
#        environment:
#          MYSQL_USER: ubuntu
#          MYSQL_PASSWORD: ubuntu
#          MYSQL_DATABASE: circle_test
#          MYSQL_ROOT_PASSWORD: ubuntu
#          MYSQL_ALLOW_EMPTY_PASSWORD: true
#          MYSQL_ROOT_HOST: "127.0.0.1"
#
#    steps:
#      - run:
#          name: Install additional binaries
#          command: |
#            sudo apt-get -y install vim mysql-client libpng-dev
#      - run:
#          name: Install PHP extensions
#          command: |
#            sudo docker-php-ext-install pdo_mysql
#            sudo docker-php-ext-install gd
#
#      - run:
#          name: Display versions
#          command: |
#            php -v
#            composer -v
#            composer config --global --list
#
#
#      - run: echo 'export PATH=~/.composer/vendor/bin:$PATH' >> $BASH_ENV
#
#      - attach_workspace:
#          at: /home/circleci
#
#      # Install drush.
#      - run: composer global require --no-interaction drush/drush
#
#      # Create local drush alias to make sure that composer build, which relies
#      # on aliases when importing DB, work correctly.
#      - run:
#          name: Create local drush alias
#          command: mkdir -p $HOME/.drush && echo "<?php \$aliases['$SERVER'] = ['uri' => '$SERVER', 'root' => '$DOCROOT_DIR'];" > $HOME/.drush/$SERVER.aliases.drushrc.php && drush sa && cat $HOME/.drush/$SERVER.aliases.drushrc.php
#          environment:
#            SERVER: local.mysiteurl
#            DOCROOT_DIR: /home/circleci/project/build/docroot
#
#      # @debug
#      - run: cat docroot/sites/default/settings.beetbox.php
#
#      # Run actual project/build build.
#      - run: composer build
#
#      # Check that Drupal can be bootstrapped after updates.
#      - run: drush status --root=$DOCROOT_DIR | grep -aqoi "Drupal bootstrap\s*:\s*Successful"
#
#  # Run tests.
#  test_behat:
#    docker:
#      - image: circleci/php:7.0-cli
#
#    steps:
#      - run: echo "Placeholder for Behat test runner"
#
#  # Deploy primary branches.
#  deploy_primary:
#    machine: true
#    steps:
#      - run: echo "Running deployment command for 'primary' branches"
#
#  # Deploy feature branches.
#  deploy_features:
#    machine: true
#    steps:
#      - run: echo "Running deployment command for 'feature' branches"

workflows:
  version: 2

  cs_and_build_and_test:
    jobs:
      - build_dependencies
      - download_db
      - code_style:
          requires:
            - build_dependencies
            - download_db
#      - build:
#          requires:
#            - build_dependencies
#            - download_db
#            - code_style
#      - test_behat:
#          requires:
#            - build
#      - deploy_primary:
#          requires:
#            - test_behat
#          filters:
#            branches:
#              only: /master|develop|ci|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?/
#      - deploy_features:
#          requires:
#            - test_behat
#          filters:
#            branches:
#              only: /feature\/[a-zA-z0-9\-]+/
