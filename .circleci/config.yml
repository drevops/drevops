## [META]
# CircleCI 2.0 configuration file.
#
# Content between "META" and "/META" (like the ones above and below this
# paragraph) is explaining drupal-dev inner works and can be safely removed for
# specific project.
# [/META]
version: 2
aliases:
  # Variables.
  # For YAML support of anchors and references, @see http://blog.daemonl.com/2016/02/yaml.html

  # SSH key fingerprint to deploy code. Add private key of the user who is
  # allowed to push to $DEPLOY_REMOTE repo under "SSH Permissions" in
  # CircleCI UI.
  # [META]
  # This is a fingerprint of the key to push drupal-dev project itself.
  # Replace this key fingerprint with your own.
  # [/META]
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  - &container_config
    working_directory: /app
    environment: &container_config_environment
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      # [META]
      # Using "runner" container where each job will be executed.
      # [/META]
      - image: integratedexperts/circleci2-builder
        environment:
          COMPOSER_ALLOW_SUPERUSER: 1
          COMPOSE_FILE: docker-compose.yml:docker-compose.ci.yml
          # How often to cache DB dump for.
          DB_TIMESTAMP: +%Y_%m_%d
  # Step to configure git to connect to remote servers for deployment.
  # [META]
  # It is advised to create separate 'deployer' user with own SSH key for each
  # project.
  # Add the following variables through CircleCI UI.
  # $DEPLOY_USER_NAME - name of the user who will be committing to a remote repository.
  # $DEPLOY_USER_EMAIL - email address of the user who will be committing to a remote repository.
  # $DEPLOY_REMOTE - remote repository to push artefact to.
  # [/META]
  - &step_configure_git
    run:
      name: Configure git
      command: |
        git config --global user.email "$DEPLOY_USER_EMAIL" && git config --global user.name "$DEPLOY_USER_NAME"
        mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        DEPLOY_SSH_FILE="${DEPLOY_SSH_FINGERPRINT//:}" && DEPLOY_SSH_FILE="id_rsa_${DEPLOY_SSH_FILE//\"}" && ssh-add -D && ssh-add ~/.ssh/$DEPLOY_SSH_FILE

jobs:
  build:
    <<: *container_config
    parallelism: 2
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Composer validate.
          command: composer validate --ansi --strict
      - run:
          name: Set timestamp for database caching.
          command: echo "$(date $DB_TIMESTAMP)" > /tmp/DB_TIMESTAMP
      - restore_cache:
          keys:
            - v1-db-{{ checksum "/tmp/DB_TIMESTAMP" }}
      # [META]
      # Download DB dump from public URL to test Drupal-dev project/build.
      # Replace the line below with your custom database retrieval script in your project.
      # [/META]
      - run:
          name: Downloading database
          command: if [ ! -f .data/db.sql ] ; then make download-db; else echo "Using cached DB dump";fi
      - save_cache:
          key: v1-db-{{ checksum "/tmp/DB_TIMESTAMP" }}
          paths:
            - .data
      # [META]
      # Uncomment the line below to download DB dump from FTP, using
      # variables set in Circle CI UI.
      # - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -u $FTP_USER:$FTP_PASS "ftp://$FTP_HOST/db.dist.sql" -o $DATA_ROOT/db.dist.sql; fi
      # [/META]
      - run:
          name: Pull newest Docker images.
          command: make docker-pull
      - run:
          name: Start scontainers.
          command: |
            echo "COMPOSE_FILE=$COMPOSE_FILE">>.env
            make docker-start
            sleep 10 # Wait for DB container to startup.
            docker ps -a
      # Since app is being built inside of the containers without dev
      # dependencies and they will be installed later to run tests, but
      # deployment code should not contain any dev dependencies, we have
      # to store built codebase into workspace to later use it in 'deploy'
      # job.
      - run:
          name: Copy built codebase into workspace for future deployment.
          command: |
            mkdir -p /workspace/code
            docker cp -L $(docker-compose ps -q cli):/app/. /workspace/code
      - run:
          name: Site setup.
          command: |
            make import-db
            make docker-cli -- mkdir -p /app/screenshots
      - run:
          name: Install dev dependencies.
          command: |
            make docker-cli -- composer install --ansi
            make docker-cli -- npm install
      - run:
          name: Lint code.
          command: docker exec $(docker-compose ps -q cli) make lint
      - run:
          name: Run tests.
          command: |
            [ "$CIRCLE_NODE_TOTAL" -gt "1" ] && BEHAT_PROFILE=--profile=p$CIRCLE_NODE_INDEX
            make test-behat || make test-behat --rerun
      - run:
          name: Copy artifacts.
          command: |
            mkdir -p /tmp/artifacts/behat
            docker cp $(docker-compose ps -q cli):/app/screenshots /tmp/artifacts/behat
          when: always
      - store_artifacts:
          path: /tmp/artifacts
      - run:
          name: Copy built dev codebase into workspace.
          command: |
            mkdir -p /workspace/code-dev
            docker cp -L $(docker-compose ps -q cli):/app/. /workspace/code-dev
      - persist_to_workspace:
          root: /workspace
          paths:
            - code
            - code-dev

  # Deploy primary branches.
  # [META]
  # Specify, $SHOULD_DEPLOY, $DEPLOY_REMOTE, $DEPLOY_USER_EMAIL, and
  # $DEPLOY_USER_NAME in "Environment Variables" section in CircleCI UI.
  # Also, add private key of the user who is allowed to push to $DEPLOY_REMOTE
  # under "SSH Permissions" in CircleCI UI.
  # [/META]
  deploy:
    <<: *container_config
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - *step_configure_git
      - attach_workspace:
          at: /workspace
      - run:
          name: Install dev dependencies.
          command: |
            composer install -n --ansi --prefer-dist --ignore-platform-reqs
      - run: cp -a .git /workspace/code
      - run:
          name: Push artefact to remote repository
          command: |
            if [ \"$SHOULD_DEPLOY\" != \"\" ]; then
              make build-artefact $DEPLOY_REMOTE --root=/app --src=/workspace/code --gitignore=/workspace/code/.gitignore.artefact --push --report=/tmp/artifacts/deployment_report.txt
            else
              echo "Skipping deployment"
            fi
      - store_artifacts:
          path: /tmp/artifacts

  # [META]
  # Deployment for drupal-dev itself. Remove the code below in
  # your project.
  deploy_drupal_dev:
    <<: *container_config
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - *step_configure_git
      - attach_workspace:
          at: /workspace
      - run:
          name: Install dev dependencies.
          command: |
            composer install -n --ansi --prefer-dist --ignore-platform-reqs
      - run: cp -a .git /workspace/code
      - run:
          # @see https://github.com/integratedexperts/drupal-dev-destination
          name: Push artefact to remote repository for drupal-dev.
          command: |
            if [ \"$SHOULD_DEPLOY_DRUPAL_DEV\" != \"\" ]; then
              make build-artefact $DEPLOY_REMOTE --root=/app --src=/workspace/code --gitignore=/workspace/code/.gitignore.artefact --push --report=/tmp/artifacts/deployment_drupal_dev_report.txt --branch=release/[tags:-];
            else
              echo "Skipping deployment";
            fi
      - store_artifacts:
          path: /tmp/artifacts
  # [/META]
workflows:
  version: 2
  main:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/[a-zA-z0-9\-\.\,]+/

      # [META]
      # Tag deployment for drupal-dev itself. Remove the code below in
      # your project.
      - deploy_drupal_dev:
          requires:
            - build
          filters:
            tags:
              only: /^(?:7|8)\.x\-[0-9]+\.[0-9]+(?:[A-z\-])*$/
            branches:
              ignore: /.*/
      # [/META]
