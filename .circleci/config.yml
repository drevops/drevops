##
## CircleCI 2.0 configuration file.
##
## Comments starting with 2 hash symbols (like the ones used for the current
## paragraph) are explaining Drupal-Dev inner working and can be safely removed
## for specific project.
##
## Do not manually remove these comments. Instead, run `ahoy init` to initialise
## this project.
version: 2
aliases:
  # Variables.
  # For YAML support of anchors and references, @see http://blog.daemonl.com/2016/02/yaml.html

  # SSH key fingerprint to deploy code. Add private key of the user who is
  # allowed to push to $DEPLOY_REMOTE repo under "SSH Permissions" in
  # CircleCI UI.
  ##
  ## This is a fingerprint of the key to push Drupal-Dev project itself.
  ## Replace this key fingerprint with your own.
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  # Shared configuration applied to each job.
  - &container_config
    working_directory: /app
    environment:
      DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      ## Using "runner" container where each job will be executed. This container
      ## has all necessary tools to run dockerized environment.
      ## @see https://github.com/integratedexperts/ci-builder
      - image: integratedexperts/ci-builder
        environment:
          COMPOSE_PROJECT_NAME: mysite
          # How often to cache DB dump for. See 'database' job below for more information.
          # @todo:dev Revert below.
          DB_TIMESTAMP: +%Y_%m_%d_%H_%M
          DB_SEMAPHORE_FILE: /tmp/db-new
    ## Use large resource class for faster builds.
    ## Uncomment the line below if your account has this option configured.
    ## resource_class: xlarge

  # Step to setup remote docker.
  - &step_setup_remote_docker
    ## [META:CI_NO_DLC]
      setup_remote_docker
    ## [/META:CI_NO_DLC]
    ## [META:CI_DLC]
    ## Uncomment lines below if your CircleCI plan supports docker layer caching.
    ## Docker Layer Caching allows to significantly speed up builds by caching
    ## images built during previous runs.
    ## @see https://circleci.com/docs/2.0/docker-layer-caching/
    # setup_remote_docker:
    #   docker_layer_caching: true
    ## [/META:CI_DLC]

  # Step to configure git and SSH to connect to remote servers for deployment.
  ##
  ## Deployment to remote git repositories allows to build the project and all
  ## required artifacts in CI and then commit only required files to
  ## the destination repository. This makes applications fast and secure,
  ## because none of unnecessary code (such as development tools) are  exposed
  ## to production environment.
  ##
  ## It is advised to create a separate Deployer user with own SSH key for each project.
  ##
  ## Add the following variables through CircleCI UI.
  ## $DEPLOY_USER_NAME - name of the user who will be committing to a remote repository.
  ## $DEPLOY_USER_EMAIL - email address of the user who will be committing to a remote repository.
  ## $DEPLOY_REMOTE - remote repository to push artefact to.
  - &step_configure_git
    run:
      name: Configure git
      command: git config --global user.email "$DEPLOY_USER_EMAIL" && git config --global user.name "$DEPLOY_USER_NAME"

  - &step_configure_ssh
    run:
      name: Configure SSH
      command: |
        mkdir -p ${HOME}/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n" > ${HOME}/.ssh/config
        DEPLOY_SSH_FILE="${DEPLOY_SSH_FINGERPRINT//:}" && DEPLOY_SSH_FILE="${HOME}/.ssh/id_rsa_${DEPLOY_SSH_FILE//\"}"
        if [ -f "${DEPLOY_SSH_FILE}" ]; then
          echo "Found Deploy SSH key file ${DEPLOY_SSH_FILE}"
          ssh-add -D
          ssh-add ${DEPLOY_SSH_FILE}
        fi

jobs:
  ## Database handling is a first step of the build. It contains:
  ## - database download
  ## - database sanitization
  ## - database caching
  ## - conditions to bypass previous steps in concurrent builds (to speed them up).
  ##
  ## $DB_TIMESTAMP is used to determine if a fresh DB dump should be downloaded
  ## for the current build. Usually, a daily database dump is sufficient for
  ## development activities.
  ##
  ## Set DB_SANITIZE variable to `1` in Circle CI UI to sanitize DB using
  ## standard drush sanitization. You may also use custom SQL script to add more
  ## sanitization steps by setting $DB_SANITIZE_SQL variable to the path of this
  ## script.
  database:
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - run:
          name: Set timestamp for database caching
          command: echo "$(date ${DB_TIMESTAMP})" > /tmp/DB_TIMESTAMP && cat /tmp/DB_TIMESTAMP
      - restore_cache:
          keys:
            - v1-db8-{{ checksum "/tmp/DB_TIMESTAMP" }}
      - run: .circleci/download-db.sh
      - run: if [ -f ${DB_SEMAPHORE_FILE} ]; then .circleci/build.sh; fi
      - run: if [ -f ${DB_SEMAPHORE_FILE} ]; then ahoy export-db db.sql; fi
      - save_cache:
          key: v1-db8-{{ checksum "/tmp/DB_TIMESTAMP" }}
          paths:
            - .data

  ## Build and test is a second step of the build. The testing is performed
  ## within the same job to save time on provisioning during the job.
  ##
  ## In this job:
  ## - validate composer.json and composer.lock files
  ## - build project and store built code for further use in deployment job
  ## - run tests
  ## - store test artifacts
  # [/META]
  build:
    <<: *container_config
    parallelism: 2
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_setup_remote_docker
      - restore_cache:
          keys:
            - v1-db8-
      - run: .circleci/build.sh
      - run: .circleci/test.sh
      - run:
          name: Copy artifacts
          command: .circleci/test-artifacts.sh
          when: always
      - store_artifacts:
          path: /tmp/artifacts
      ## Dependencies are not required for the next jobs, so there is no point
      ## to wait for all of them to persist to the workspace (it is faster to
      ## remove files then archive and save them).
      - run:
          name: Remove dependencies before persisting
          command: rm -Rf node_modules && rm -Rf vendor
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  # Deploy primary branches.
  ##
  ## Specify, $SHOULD_DEPLOY, $DEPLOY_REMOTE, $DEPLOY_USER_EMAIL, and
  ## $DEPLOY_USER_NAME in "Environment Variables" section in CircleCI UI.
  ## Also, add private key of the user who is allowed to push to $DEPLOY_REMOTE
  ## under "SSH Permissions" in CircleCI UI.
  ##
  ## Note that we do not start container stack for deployment.
  deploy: &job_deploy
    <<: *container_config
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - *step_configure_git
      - *step_configure_ssh
      - attach_workspace:
          at: /workspace
      - run:
          name: Install dev dependencies
          command: composer install -n --ansi --prefer-dist --ignore-platform-reqs
      - run: |
          cp -a .git /workspace/code
          cp -a .gitignore.artefact /workspace/code
      - run:
          name: Push artefact to remote repository
          command: |
            if [ "$SHOULD_DEPLOY" ]; then
              vendor/bin/robo --ansi --load-from vendor/integratedexperts/robo-git-artefact/RoboFile.php artefact $DEPLOY_REMOTE --root=/app --src=/workspace/code --gitignore=/workspace/code/.gitignore.artefact --push --report=/tmp/artifacts/deployment_report.txt --no-cleanup
            else
              echo "Skipping deployment"
            fi
      - store_artifacts:
          path: /tmp/artifacts

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - *step_configure_git
      - *step_configure_ssh
      - attach_workspace:
          at: /workspace
      - run:
          name: Install dev dependencies
          command: composer install -n --ansi --prefer-dist --ignore-platform-reqs
      - run: |
          cp -a .git /workspace/code
          cp -a .gitignore.artefact /workspace/code
      - run:
          name: Push artefact to remote repository
          command: |
            if [ "$SHOULD_DEPLOY" ]; then
              vendor/bin/robo --ansi --load-from vendor/integratedexperts/robo-git-artefact/RoboFile.php artefact $DEPLOY_REMOTE --root=/app --src=/workspace/code --gitignore=/workspace/code/.gitignore.artefact --push --report=/tmp/artifacts/deployment_report.txt --branch=deployment/[tags:-];
            else
              echo "Skipping deployment"
            fi
      - store_artifacts:
          path: /tmp/artifacts

  ## [META]
  ##############################################################################
  ## Test suite for Drupal-Dev. Remove the lines below in your project.       ##
  ##############################################################################
  test_drupal_dev:
    <<: *container_config
    steps:
      - checkout
      - run: export DRUPAL_VERSION=8 && .drupal-dev/tests/test-init.sh
      - *step_setup_remote_docker
      - run: for file in $(find scripts .circleci .drupal-dev -type f -name "*.sh"); do LC_ALL=C.UTF-8 shellcheck $file; done;
      - run: export VOLUMES_MOUNTED=0 && export DRUPAL_VERSION=8 && .drupal-dev/tests/test-workflow.sh

  test_drupal_dev_artefact:
    <<: *container_config
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - *step_configure_git
      - attach_workspace:
          at: /workspace
      - run: export DRUPAL_VERSION=8 && .drupal-dev/tests/test-artefact.sh /workspace/code

  # Deployment of feature branches and tags for Drupal-Dev itself.
  deploy_drupal_dev:
    <<: *job_deploy

  deploy_drupal_dev_tags:
    <<: *job_deploy_tags
  ## [/META]
workflows:
  version: 2
  main:
    jobs:
      - database:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - database
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - master, develop, ci, cisomething
              # - release/123, release/123.456, release/123.456.789, release/123.456.789-rc123
              # - hotfix/123, hotfix/123.456, hotfix/123.456.789
              # - feature/description, feature/123-description, but not feature/8.x-description or feature/7.x-description
              only: /master|develop|ci.*|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|feature\/(?!7.x-|8.x-)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags: 1, 123, 123.456, 123.456.789, 123.456.789-rc123
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)$/
      ## [META]
      ## Feature and tag deployment for Drupal-Dev itself. Remove the code below in your project.
      - test_drupal_dev:
          filters:
            tags:
              only: /.*/
      - test_drupal_dev_artefact:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - deploy_drupal_dev:
          requires:
            - build
            - test_drupal_dev
          filters:
            branches:
              # Allowed branches: 7.x, 8.x, feature/7.x-description, feature/8.x-description
              only: /(?:7|8)\.x|feature\/(?:7|8)\.x[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      - deploy_drupal_dev_tags:
          requires:
            - build
            - test_drupal_dev
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(?:7|8)\.x\-[0-9]+\.[0-9]+(?:[A-z0-9\-])*$/
      ## [/META]
