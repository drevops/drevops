# YAML supports anchors and references.
# @see http://blog.daemonl.com/2016/02/yaml.html
version: 2

references:
  # Variables.
  workspace_root:     &workspace_root     /home/circleci/project
  code_dir:           &code_dir           code
  code_root:          &code_root          /home/circleci/project/code
  data_dir:           &data_dir           data
  data_root:          &data_root          /home/circleci/project/data
  docroot_dir:        &docroot_dir        docroot
  server:             &server             local.mysiteurl
  web_url:            &web_url            https://local.mysiteurl
  deps_cache_key:     &deps_cache_key     v2-dependencies-{{ checksum "composer.json" }}-{{ epoch }}
  deps_cache_key_any: &deps_cache_key_any v2-dependencies-{{ checksum "composer.json" }}

  # Configuration shared between all containers.
  container_config: &container_config
    working_directory: *code_root

    environment: &container_config_environment
      WORKSPACE_ROOT: *workspace_root
      CODE_ROOT: *code_root
      DATA_ROOT: *data_root
      DOCROOT: *docroot_dir
      SERVER: *server
      WEB_URL: *web_url
      MYSQL_USER: ubuntu
      MYSQL_PASSWORD: ubuntu
      MYSQL_DATABASE: circle_test
      MYSQL_HOST: 127.0.0.1
      MYSQL_ROOT_PASSWORD: ubuntu
      MYSQL_ROOT_HOST: 127.0.0.1

    docker: &container_config_docker
      - image: circleci/php:7.1-cli
        environment:
          <<: *container_config_environment

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  code_dependencies:
    <<: *container_config
    steps:
      # @debug
      - run: printenv

      - checkout
      # @debug
      - run: test -d $DOCROOT/sites

      - restore_cache:
          keys:
            - *deps_cache_key_any

      - run:
          name: Install dependencies
          command: composer install -n --prefer-dist

      - save_cache:
          paths:
          # @note: We do not cache vendor dir as this prevent Drupal core files
          # from being built on the next run and we cannot cache the whole
          # docroot as it contains excluded files.
            - ~/.composer/cache
          key: *deps_cache_key

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *code_dir

      # Validate step results.
      # @debug
      - run: test -d ~/.composer/cache
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: cat /home/circleci/project/code/docroot/sites/default/settings.beetbox.php

  # Download DB.
  download_db:
    <<: *container_config
    working_directory: *workspace_root
    steps:
      - restore_cache:
          keys:
            - v1-data-{{ .Branch }}

      # Download DB dump from public URL to test Drupal-dev project/build.
      # Remove the line below in your project/build.
      - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -L https://goo.gl/WFtJbT -o $DATA_ROOT/db.dist.sql; fi
      # [META] Uncomment the line below to download DB dump from FTP, using
      # variables set in Circle CI UI.
      # - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -u $FTP_USER:$FTP_PASS "ftp://$FTP_HOST/db.dist.sql" -o $DATA_ROOT/db.dist.sql; fi

      - save_cache:
          paths:
            - *data_dir
          key: v1-data-{{ .Branch }}

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *data_dir

      # Validate step results.
      # @debug
      - run: test -f /home/circleci/project/data/db.dist.sql

  # Code style checking.
  # Fail fast if code style is incorrect.
  code_style:
    <<: *container_config
    steps:
      - *attach_workspace

      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -d /home/circleci/project/code/docroot/sites/all/modules/custom

      - run:
          name: Lint code
          command: composer cs

      - run: test -d /home/circleci/project/code

  # Build.
  build:
    <<: *container_config
    docker:
      - image: mysql:5.7
        environment:
          <<: *container_config_environment
    steps:
      - *attach_workspace

      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -f /home/circleci/project/data/db.dist.sql
      - run: test -f /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: cat /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: printenv

      - run:
          name: Install additional binaries
          command: |
            sudo apt-get -y install vim mysql-client libpng-dev

      # @debug
      - run: mysql -h 127.0.0.1 -u ubuntu -pubuntu --database=circle_test -e"quit"

      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
#            sudo docker-php-ext-install gd

      - run:
          name: Display versions
          command: |
            php -v
            composer -v
            composer config --global --list

      # @todo: Move this to the config section section.
      - run: echo 'export PATH=~/.composer/vendor/bin:$PATH' >> $BASH_ENV

      # Install drush.
      - run: composer global require --no-interaction drush/drush

      # @debug
      - run: command -v drush
      - run: drush --version

      # Create local drush alias to make sure that composer code, which relies
      # on aliases when importing DB, works correctly.
      - run:
          name: Create local drush alias
          command: mkdir -p $HOME/.drush && echo "<?php \$aliases['$SERVER'] = ['uri' => '$SERVER', 'root' => '$DOCROOT'];" > $HOME/.drush/$SERVER.aliases.drushrc.php && drush sa && cat $HOME/.drush/$SERVER.aliases.drushrc.php

      - run:
          name: Symlink data into local data directory.
          command: ln -s $DATA_ROOT $CODE_ROOT/.data

      # @debug
      - run: test -L $CODE_ROOT/.data
      - run: test -f $CODE_ROOT/.data/db.dist.sql

      # Run actual project build.
      - run: composer build

      # @debug
      - run: drush status --root=$DOCROOT

      # Check that Drupal can be bootstrapped.
      - run: drush status --root=$DOCROOT | grep -aqoi "Drupal bootstrap\s*:\s*Successful"

      - run:
          name: Store built DB as an artefact.
          command: drush --root=$DOCROOT sql-dump > .data/db.sql

      # @debug
      - run: test -f $CODE_ROOT/.data/db.sql

  # Run tests.
  test_behat:
    <<: *container_config

    steps:
      - run: echo "Placeholder for Behat test runner"

  # Deploy primary branches.
  deploy_primary:
    <<: *container_config
    steps:
      - run: echo "Running deployment command for 'primary' branches"

  # Deploy feature branches.
  deploy_features:
    <<: *container_config
    steps:
      - run: echo "Running deployment command for 'feature' branches"

workflows:
  version: 2

  main:
    jobs:
      - code_dependencies
      - download_db
      - code_style:
          requires:
            - code_dependencies
      - build:
          requires:
            - code_dependencies
            - download_db
            - code_style
      - test_behat:
          requires:
            - build
      - deploy_primary:
          requires:
            - test_behat
          filters:
            branches:
              only: /master|develop|ci|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?/
      - deploy_features:
          requires:
            - test_behat
          filters:
            branches:
              only: /feature\/[a-zA-z0-9\-]+/
