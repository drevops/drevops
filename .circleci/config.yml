#:
#: CircleCI 2.0 configuration file.
#:
#: This configuration file uses the "docker" executor. A "runner" container,
#: created from a specified Docker image, is used to checkout source code and
#: run commands defined in this file. Application Docker containers defined in
#: docker-compose.yml run on a *remote* Docker server controlled by CircleCI.
#: The "runner" container uses Docker client to control the remote Docker server.
#:
#: Comments starting with '#;', '#;<' or '#;>' (like the ones used for the
#: current paragraph) are explaining DrevOps inner workings and can be safely
#: removed for your project. They are automatically removed when installing or
#: updating DrevOps.
version: 2

#:###############################################################################
#: VARIABLES
#:###############################################################################
#: For YAML support of anchors and references, see http://blog.daemonl.com/2016/02/yaml.html
aliases:
  #-----------------------------------------------------------------------------
  # Per-project variables.
  #-----------------------------------------------------------------------------

  #;< !PROVISION_USE_PROFILE
  # SSH key fingerprint to download the database.
  #: Generate a separate SSH key for a user who has permissions to download the
  #: database from the production environment and it under "SSH Permissions" in
  #: CircleCI UI.
  #:
  #: Example command to generate SSH key:
  #: ssh-keygen -m PEM -t rsa -C "deployer@example.com"
  #:
  #: This is a fingerprint of the key to test DrevOps project itself as an example.
  #: Replace this key fingerprint with your own and remove this comment.
  - &db_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"
  #;> !PROVISION_USE_PROFILE

  # SSH key fingerprint to deploy code.
  #: Generate a separate SSH key for a user who has permissions to perform a
  #: deployment and add it under "SSH Permissions" in CircleCI UI.
  #:
  #: Example command to generate SSH key:
  #: ssh-keygen -m PEM -t rsa -C "deployer@example.com"
  #:
  #: This is a fingerprint of the key to push DrevOps project itself as an example.
  #: Replace this key fingerprint with your own and remove this comment.
  - &deploy_ssh_fingerprint "56:f3:3f:51:c3:8f:b3:75:01:90:6e:26:48:e7:48:e1"

  # Timezone of the runner container to ensure that DB cache key uses correct date.
  # @see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  # Replace this timezone with your own.
  - &timezone "Australia/Melbourne"

  # Number of parallel jobs to run. Applies to 'build' job only.
  - &parallelism 2

  #;< RENOVATEBOT
  # Make sure that correct repository is specified or bot will go
  # through all repositories that a RENOVATE_TOKEN token has access to.
  #;< DREVOPS_DEV
  - &renovatebot_repository 'drevops/drevops-destination'
  #;> DREVOPS_DEV
  ##### - &renovatebot_repository 'your_org/your_site'
  # The author details to use for commits made by RenovateBot.
  - &renovatebot_git_author 'RenovateBot Self Hosted <renovatebot@your-site-url.example>'
  # The schedule to run RenovateBot on. Defaults to running twice a day.
  - &renovatebot_schedule "5 11,23 * * *"
  # Set to 'false' (without single quotes) once the setup is complete and
  # the bot ran at least once without errors.
  - &renovatebot_dry_run true
  # The branch to run RenovateBot on.
  - &renovatebot_branch develop
  #;> RENOVATEBOT

  #-----------------------------------------------------------------------------
  # Optional variables.
  #-----------------------------------------------------------------------------

  # CI runner resource class.
  # @see https://circleci.com/docs/2.0/configuration-reference/#resource_class
  # Change to 'large' for faster builds.
  - &resource_class medium

  # Docker Layer Caching allows to significantly speed up builds by caching
  # images built during previous runs.
  # @see https://circleci.com/docs/2.0/docker-layer-caching/
  # Change to 'true' (without single quotes) to enable.
  - &docker_layer_caching false

  #;< !PROVISION_USE_PROFILE
  # The granularity of the database cache age: the cache will be refreshed if
  # the current date is different from the cache timestamp.
  # Refer to `date` command for possible values.
  - &drevops_ci_db_cache_timestamp +%Y%m%d
  # Use previous database caches on this branch as a fallback if the above cache
  # does not match (for example, the cache is available only from the previous
  # day). If "no" is set, the cache will be rebuilt from scratch.
  # Allowed values are "yes" or "no" (include enclosing double quotes).
  - &drevops_ci_db_cache_fallback "yes"

  # Which branch to use for a source of the DB caches. Usually, it is the default
  # project branch or *nightly_db_branch (see below).
  - &drevops_ci_db_cache_branch "develop"

  # Database cache directory.
  - &db_cache_dir /root/project/.data

  # Schedule to run nightly database build (to cache the database for the next day).
  # Defaults to 4am UTC (make sure to adjust for your time zone).
  - &nightly_db_schedule "0 18 * * *"

  # The branch used for nightly builds.
  - &nightly_db_branch develop
  #;> !PROVISION_USE_PROFILE

  #:-----------------------------------------------------------------------------

  #: Shared configuration applied to each job.
  - &container_config
    #: Location of the checked-out files within the "runner" container.
    working_directory: &working_directory /root/project
    environment:
      #;< !PROVISION_USE_PROFILE
      DREVOPS_DB_DOWNLOAD_SSH_FINGERPRINT: *db_ssh_fingerprint
      #;> !PROVISION_USE_PROFILE
      DREVOPS_DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
    docker:
      #: Using "runner" container where each job will be executed.
      #: This container has all necessary tools to run dockerized environment.
      #: @see https://github.com/drevops/ci-builder
      #: @see https://hub.docker.com/repository/docker/drevops/ci-builder/tags?page=1&ordering=last_updated
      - image: drevops/ci-builder:23.8.1
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
        environment:
          # Set timezone to ensure that executed operations use correct timestamps.
          TZ: *timezone
          # Set terminal capabilities.
          TERM: xterm-256color
          # Check only minimal stack requirements.
          DREVOPS_DOCTOR_CHECK_MINIMAL: 1
          #;< !PROVISION_USE_PROFILE
          # How often to refresh the cache of the DB dump. Refer to `date` command.
          DREVOPS_CI_DB_CACHE_TIMESTAMP: *drevops_ci_db_cache_timestamp
          # Use cache fallback if the above timestamp does not match.
          DREVOPS_CI_DB_CACHE_FALLBACK: *drevops_ci_db_cache_fallback
          # Which branch to use as a source of DB caches.
          DREVOPS_CI_DB_CACHE_BRANCH: *drevops_ci_db_cache_branch
          #;> !PROVISION_USE_PROFILE
          # Directory to store code exported between jobs.
          DREVOPS_EXPORT_CODE_DIR: &drevops_build_export_dir /workspace/code
          # Directory to store test results.
          DREVOPS_TEST_REPORTS_DIR: &drevops_test_reports_dir /tmp/tests
          # Directory to store test artifacts.
          DREVOPS_TEST_ARTIFACT_DIR: &drevops_test_artifact_dir /tmp/artifacts
          # Use compact error reporting format for Behat tests.
          DREVOPS_TEST_BEHAT_FORMAT: progress_fail
          # Directory to use for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_SRC: *drevops_build_export_dir
          # Source code location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_ROOT: *working_directory
          # Report file location for artifact deployments.
          DREVOPS_DEPLOY_ARTIFACT_REPORT_FILE: /tmp/artifacts/deployment_report.txt
    resource_class: *resource_class

  # Set up remote Docker.
  - &step_setup_remote_docker
    setup_remote_docker:
      docker_layer_caching: *docker_layer_caching
      version: 20.10.18

  # Set up Docker network.
  - &step_setup_docker_network
    run: docker network prune -f >/dev/null 2>&1 && docker network inspect amazeeio-network >/dev/null 2>&1 || docker network create amazeeio-network >/dev/null 2>&1 || true

  # Process the codebase to be run in CI environment.
  - &step_process_codebase
    run:
      name: Process codebase to run in CI
      #: Remove lines containing '###' and uncomment comments starting with '##'.
      command: sed -i -e "/###/d" docker-compose.yml && sed -i -e "s/##//" docker-compose.yml

#:###############################################################################
#: JOBS
#:###############################################################################
jobs:
  #;< !PROVISION_USE_PROFILE
  #: Database handling is a first step of the build.
  #:
  #: $DREVOPS_CI_DB_CACHE_TIMESTAMP is used to determine if a fresh DB dump
  #: should be downloaded for the current build. Usually, a daily database dump
  #: is sufficient for development activities.
  #:
  #: $DREVOPS_CI_DB_CACHE_FALLBACK is used if the cache did not match $DREVOPS_CI_DB_CACHE_TIMESTAMP.
  #: This allows to rely on the cache from the previous days within the same
  #: branch.
  database: &job_database
    <<: *container_config
    steps:
      - attach_workspace:
          at: /workspace
      #: Add SSH key into "runner" container to have SSH access to download DB.
      - add_ssh_keys:
          fingerprints:
            - *db_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Create cache keys for database caching as files
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "${DREVOPS_CI_DB_CACHE_FALLBACK/no/$CIRCLE_BUILD_NUM}" | tee /tmp/db_cache_fallback
            echo "$(date $DREVOPS_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo
            echo 'v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-{{ checksum "/tmp/db_cache_timestamp" }}'

      - restore_cache:
          keys:
            # Restore DB cache based on the cache strategy set by the cache keys below.
            #
            # @see https://circleci.com/docs/2.0/caching/#restoring-cache
            #
            # Change 'v1' to 'v2', 'v3' etc., commit and push to force cache reset.
            #
            # Lookup cache based on the default branch and a timestamp. Allows
            # to use cache from the very first build on the day (sanitized
            # database dump, for example).
            - v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-{{ checksum "/tmp/db_cache_timestamp" }}
            #
            # Fallback to caching by default branch name only. Allows to use
            # cache from the branch build on the previous day.
            - v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback" }}-
      - run:
          name: Download DB
          command: DREVOPS_DB_DOWNLOAD_SEMAPHORE=/tmp/download-db ./scripts/drevops/download-db.sh
          no_output_timeout: 30m
      #: Execute commands after database download script finished: if the
      #: DB dump was downloaded - build the site (to ensure that the DB dump
      #: is valid) and export the DB using selected method (to support
      #: "file-to-Docker image" or "Docker image-to-file" conversions).
      #: Also, for DB-in-docker-image builds, remove the DB dump file to avoid
      #: importing it in the follow-up jobs.
      #: Note that configuration changes and the DB updates are not applied, so
      #: the database will be cached as downloaded.
      - run:
          name: Export DB after download
          command: |
            if [ -f /tmp/download-db ]; then
              DREVOPS_PROVISION_POST_OPERATIONS_SKIP=1 ./scripts/drevops/build.sh
              grep -q ^DREVOPS_DB_DOCKER_IMAGE .env && rm .data/db.sql || true
              ./scripts/drevops/export-db.sh db.sql
            else
              echo "==> Database download semaphore file is missing. DB export will not proceed."
            fi
          no_output_timeout: 30m
      - save_cache:
          # Save cache per default branch and the timestamp.
          # The cache will not be saved if it already exists.
          # Note that the cache fallback flag is enabled for this case in order
          # to save cache even if the fallback is not used when restoring it.
          key: v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
          paths:
            - *db_cache_dir

  #: Nightly database job. Same as above, but with additional variables set.
  database_nightly:
    <<: *job_database
    environment:
      DREVOPS_DB_DOWNLOAD_SSH_FINGERPRINT: *db_ssh_fingerprint
      DREVOPS_DEPLOY_SSH_FINGERPRINT: *deploy_ssh_fingerprint
      # Enforce fresh DB build (do not rely on fallback caches).
      DREVOPS_CI_DB_CACHE_FALLBACK: 'no'
      # Always use fresh base image for the database.
      DREVOPS_DB_DOCKER_IMAGE_BASE: drevops/mariadb-drupal-data:23.4.2
      # Deploy docker image (if DREVOPS_DB_EXPORT_DOCKER_IMAGE storage is used).
      DREVOPS_EXPORT_DB_DOCKER_DEPLOY_PROCEED: 1
  #;> !PROVISION_USE_PROFILE

  #: Build and test is a second step of the build. The testing is performed
  #: within the same job to save time on provisioning during the job.
  build: &job_build
    <<: *container_config
    parallelism: *parallelism
    steps:
      - attach_workspace:
          at: /workspace
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      #;< !PROVISION_USE_PROFILE
      - run:
          name: Set cache keys for database caching
          command: |
            echo "$DREVOPS_CI_DB_CACHE_BRANCH" | tee /tmp/db_cache_branch
            echo "yes" | tee /tmp/db_cache_fallback_yes
            echo "$(date $DREVOPS_CI_DB_CACHE_TIMESTAMP)" | tee /tmp/db_cache_timestamp
      - restore_cache:
          keys:
            # Use cached artifacts from previous builds of this branch.
            # @see https://circleci.com/docs/2.0/caching/#restoring-cache
            - v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-{{ checksum "/tmp/db_cache_timestamp" }}
            - v1-db10-{{ checksum "/tmp/db_cache_branch" }}-{{ checksum "/tmp/db_cache_fallback_yes" }}-
      #;> !PROVISION_USE_PROFILE
      - run:
          name: Build site
          command: ./scripts/drevops/build.sh
          no_output_timeout: 30m
      - run:
          name: Lint code
          command: docker compose exec -T cli ./scripts/drevops/lint.sh
      - run:
          name: Run tests
          command: |
            [ "${CIRCLE_NODE_TOTAL:-1}" -gt 1 ] && export DREVOPS_TEST_PARALLEL_INDEX=$CIRCLE_NODE_INDEX || true
            docker compose exec -T \
              -e DREVOPS_TEST_PARALLEL_INDEX -e DREVOPS_TEST_REPORTS_DIR -e DREVOPS_TEST_ARTIFACT_DIR -e DREVOPS_TEST_BEHAT_FORMAT \
              cli ./scripts/drevops/test.sh
      - run:
          name: Process test logs and artifacts
          command: |
            if docker compose ps --services --filter "status=running" | grep -q cli; then
              docker compose exec -T cli mkdir -p "${DREVOPS_TEST_REPORTS_DIR}" && docker compose cp cli:"${DREVOPS_TEST_REPORTS_DIR}" "${DREVOPS_TEST_REPORTS_DIR}"
              docker compose exec -T cli mkdir -p "${DREVOPS_TEST_ARTIFACT_DIR}" && docker compose cp cli:"${DREVOPS_TEST_ARTIFACT_DIR}" "${DREVOPS_TEST_ARTIFACT_DIR}"
            fi
          when: always
      - store_test_results:
          path: *drevops_test_reports_dir
      - store_artifacts:
          path: *drevops_test_artifact_dir
      #:
      #: Persisting previously built application code artifact (without
      #: development dependencies) to use it in deployment job.
      - persist_to_workspace:
          root: /workspace
          paths:
            - code

  #;< DEPLOYMENT
  # Deploy primary branches.
  deploy: &job_deploy
    <<: *container_config
    steps:
      #: Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #: Add SSH key into "runner" container to have access to deployment repository or endpoint.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: |
            DREVOPS_DEPLOY_BRANCH="$CIRCLE_BRANCH" \
            DREVOPS_DEPLOY_PR="$(echo $CIRCLE_PULL_REQUEST | cut -d'/' -f 7)" \
            DREVOPS_DEPLOY_PR_HEAD=$CIRCLE_SHA1 \
            ./scripts/drevops/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: *drevops_test_artifact_dir

  # Deploy tags.
  deploy_tags: &job_deploy_tags
    <<: *container_config
    steps:
      #: Workspace now contains previously built application code artifact.
      - attach_workspace:
          at: /workspace
      #: Add SSH key into "runner" container to have access to deployment repository or endpoint.
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - checkout
      - *step_process_codebase
      - run:
          command: DREVOPS_DEPLOY_MODE="tag" ./scripts/drevops/deploy.sh
          no_output_timeout: 30m
      - store_artifacts:
          path: *drevops_test_artifact_dir
  #;> DEPLOYMENT

  #;< RENOVATEBOT
  # Self-hosted RenovateBot.
  # Add RENOVATE_TOKEN as an environment variable with GitHub access token in UI.
  renovatebot_self_hosted:
    docker:
      - image: renovate/renovate:latest
        environment:
          RENOVATE_PLATFORM: 'github'
          RENOVATE_AUTODISCOVER: false
          RENOVATE_DEPENDENCY_DASHBOARD: true
          RENOVATE_DEPENDENCY_DASHBOARD_TITLE: 'RenovateBot Dependency Dashboard (self-hosted)'
          RENOVATE_REPOSITORIES: *renovatebot_repository
          RENOVATE_GIT_AUTHOR: *renovatebot_git_author
          RENOVATE_DRY_RUN: *renovatebot_dry_run
          LOG_LEVEL: debug
    steps:
      - checkout
      - run: renovate-config-validator
      - run: renovate
  #;> RENOVATEBOT

  #;============================================================================
  #; DREVOPS development section. Removed during DrevOps installation/update.
  #;============================================================================
  #;
  #; We are using CircleCI config file to both run the application tests (what
  #; a consumer site would use) and DrevOps' own tests (to make sure that
  #; this project is "buildable" at any time).
  #;
  #;< DREVOPS_DEV
  #
  #-----------------------------------------------------------------------------
  # Test suite for DrevOps.
  #-----------------------------------------------------------------------------
  drevops_dev_test:
    <<: *container_config
    parallelism: 1
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Run common tests
          command: DREVOPS_DEV_VOLUMES_MOUNTED=0 scripts/drevops/tests/test.common.sh
          no_output_timeout: 60m

  drevops_dev_test_workflow:
    <<: *container_config
    parallelism: 3
    resource_class: large
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Run workflow tests (long)
          command: DREVOPS_DEV_VOLUMES_MOUNTED=0 scripts/drevops/tests/test.workflow.sh
          no_output_timeout: 60m

  drevops_dev_test_deployment:
    <<: *container_config
    parallelism: 2
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - add_ssh_keys:
          fingerprints:
            - *deploy_ssh_fingerprint
      - attach_workspace:
          at: /workspace
      - run:
          name: Run deployment tests (long)
          command: DREVOPS_DEV_VOLUMES_MOUNTED=0 scripts/drevops/tests/test.deployment.sh
          no_output_timeout: 60m

  # Run tests after 'build' job.
  drevops_dev_test_postbuild:
    <<: *container_config
    parallelism: 1
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - run:
          name: Run CircleCI tests (long)
          command: DREVOPS_DEV_VOLUMES_MOUNTED=0 scripts/drevops/tests/test.postbuild.sh

  # Deployment of feature branches and tags for DrevOps itself.
  drevops_dev_deploy:
    <<: *job_deploy

  drevops_dev_deploy_tags:
    <<: *job_deploy_tags

  #-----------------------------------------------------------------------------
  # Launching and testing databases stored within Docker data image.
  #-----------------------------------------------------------------------------
  #
  # Switching between "database in file" (DIF, mounted data volume) and
  # "database-in-Docker-image" (DIDI, data volume is a part of the image) is
  # done by providing the value of DREVOPS_DB_DOCKER_IMAGE environment variable,
  # which would be set in .env file for consumer projects.
  #
  # Also, the source of the database can be either file (downloaded from
  # remote location) or a previous version of the data image.
  #
  # This means that there should be the following tests for DrevOps
  # database-in-Docker-image workflow functionality:
  # 1. DB is file -> create data image -> cache data image and push it to registry -> build and test site
  # 2. DB is image -> create data image -> cache data image and push it to registry -> build and test site
  #
  # Since we need to have "database" job generic for consumer sites and any
  # logic is controlled within DrevOps scripts, we have to create additional
  # test jobs below and run them as a part of the CI system for DrevOps itself.
  #
  # Job to test creation of the image from DB dump file when using
  # DREVOPS_DB_DOCKER_IMAGE workflow.
  drevops_dev_didi_database_fi:
    <<: *job_database
    environment:
      DREVOPS_DB_DOWNLOAD_SOURCE: curl
      DREVOPS_DB_DOWNLOAD_FORCE: 1
      # Use Docker database storage despite that the file is coming
      # from CURL - this is to make sure that image is exported into cache
      # to be used between jobs. Note that in consumer project .env file would
      # have DREVOPS_DB_DOCKER_IMAGE variable set and this environment variable
      # would not be required.
      #
      # Note that here and below we are using "destination" demo image - this
      # is to allow updating of this image from CI tests without jeopardizing
      # main demo image.
      DREVOPS_DB_DOCKER_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-10.x
      # Use a separate tag to make sure that pushed image does not affect
      # other tests (pushing broken image as 'latest' would fail other tests).
      DREVOPS_DOCKER_IMAGE_TAG: drevops_dev_didi_database_fi
      # Also, use this job to test pushing of the DB image to the Docker
      # registry to mimic what database_nightly job would do.
      DREVOPS_EXPORT_DB_DOCKER_DEPLOY_PROCEED: 1
      # Use custom cache key for this workflow to make sure that caches from
      # the main workflow are separated from this one.
      DREVOPS_CI_DB_CACHE_BRANCH: drevops_dev_didi_fi
  # Job to test creation of the image from the previous version of the image
  # when using database-in-Docker-image workflow.
  drevops_dev_database_ii:
    <<: *job_database
    environment:
      DREVOPS_DB_DOWNLOAD_SOURCE: docker_registry
      DREVOPS_DB_DOWNLOAD_FORCE: 1
      DREVOPS_DB_DOCKER_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-10.x
      DREVOPS_DOCKER_IMAGE_TAG: drevops_dev_database_ii
      # Also, use this job to test pushing of the DB image to the Docker
      # registry so mimic what database_nightly job would do.
      DREVOPS_EXPORT_DB_DOCKER_DEPLOY_PROCEED: 1
      # Use custom cache key for this workflow to make sure that caches from
      # the main workflow are separated from this one.
      DREVOPS_CI_DB_CACHE_BRANCH: drevops_dev_didi_ii
  # Job to test build of the image from the previous stage of the image when
  # using database-in-Docker-image workflow. Overwriting just the DREVOPS_DB_DOCKER_IMAGE
  # variable should change the storage mechanisms, but preserve application-level
  # stack operation.
  drevops_dev_didi_build_fi:
    <<: *job_build
    environment:
      DREVOPS_DB_DOCKER_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-10.x:drevops_dev_didi_database_fi
      # Use custom cache key for this workflow to make sure that caches from
      # the main workflow are separated from this one.
      DREVOPS_CI_DB_CACHE_BRANCH: drevops_dev_didi_fi
  drevops_dev_didi_build_ii:
    <<: *job_build
    environment:
      DREVOPS_DB_DOCKER_IMAGE: drevops/drevops-mariadb-drupal-data-demo-destination-10.x:drevops_dev_database_ii
      # Use custom cache key for this workflow to make sure that caches from
      # the main workflow are separated from this one.
      DREVOPS_CI_DB_CACHE_BRANCH: drevops_dev_didi_ii

  #-----------------------------------------------------------------------------
  # Publish docs to docs.drevops.com
  #-----------------------------------------------------------------------------
  drevops_dev_deploy_docs:
    <<: *container_config
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - add_ssh_keys:
          fingerprints:
            - "22:fe:71:f4:65:8d:cb:81:9c:31:09:4e:03:0b:33:b7"
      - run:
          name: Publish docs
          command: |
            cd scripts/drevops/docs
            sed -i -e "/###/d" docker-compose.yml
            ahoy build
            ahoy test
            if [ -n "${CIRCLE_TAG}" ]; then
              export version="${CIRCLE_TAG}"
              export version_is_stable=1
            elif [ -n "${CIRCLE_BRANCH}" ]; then
              if [ "${CIRCLE_BRANCH}" != "main" ]; then
                export version="${CIRCLE_BRANCH/\//-}"
              fi
            fi
            ahoy publish https://github.com/drevops/drevops_docs.git "${version}" "${version_is_stable:-}"
            mkdir -p /tmp/docs
            docker compose cp mkdocs:"/app/site/." "/tmp/docs"
      - run:
          name: Configure SSH.
          command: |
            DEPLOY_DOCS_SSH_FINGERPRINT="22:fe:71:f4:65:8d:cb:81:9c:31:09:4e:03:0b:33:b7"
            # Configure SSH to configure git and SSH to connect to remote servers for deployment.
            [ "$(git config --global user.name)" == "" ]  && git config --global user.name "Deployment robot"
            [ "$(git config --global user.email)" == "" ] && git config --global user.email "deploy@drevops.com"
            mkdir -p "${HOME}/.ssh/"
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > "${HOME}/.ssh/config"
            DEPLOY_DOCS_SSH_FILE="${DEPLOY_DOCS_SSH_FINGERPRINT//:}"
            DEPLOY_DOCS_SSH_FILE="${HOME}/.ssh/id_rsa_${DEPLOY_DOCS_SSH_FILE//\"}"
            if [ -f "${DEPLOY_DOCS_SSH_FILE}" ]; then
              echo "Found Deploy SSH key file ${DEPLOY_DOCS_SSH_FILE}"
              ssh-add -D > /dev/null
              ssh-add "${DEPLOY_DOCS_SSH_FILE}"
            fi
      - run:
          name: Deploy docs
          command: |
            cd /tmp/docs
            git init
            git checkout -b main
            git add -A
            git commit -m "Automatically pushed from drevops/drevops"
            git remote add origin git@github.com:drevops/docs.git
            git push origin main --force

  #-----------------------------------------------------------------------------
  # Publish installer to install.drevops.com
  #-----------------------------------------------------------------------------
  drevops_dev_deploy_installer:
    <<: *container_config
    steps:
      - checkout
      - *step_process_codebase
      - *step_setup_remote_docker
      - *step_setup_docker_network
      - add_ssh_keys:
          fingerprints:
            - "f6:b2:bb:a8:1d:9d:fb:03:c6:39:27:1e:71:bb:9a:9b"
      - run:
          name: Prepare installer.
          command: |
            composer -d scripts/drevops/installer install
            composer -d scripts/drevops/installer build
            mkdir -p /tmp/installer/docs
            cp scripts/drevops/installer/.build/install /tmp/installer/docs/index.html
            ( echo -n "// Published date: " && echo "$(date)" ) >> /tmp/installer/docs/index.html
            echo "install.drevops.com" > /tmp/installer/docs/CNAME
      - run:
          name: Configure SSH.
          command: |
            DEPLOY_DOCS_SSH_FINGERPRINT="f6:b2:bb:a8:1d:9d:fb:03:c6:39:27:1e:71:bb:9a:9b"
            # Configure SSH to configure git and SSH to connect to remote servers for deployment.
            [ "$(git config --global user.name)" == "" ]  && git config --global user.name "Deployment robot"
            [ "$(git config --global user.email)" == "" ] && git config --global user.email "deploy@drevops.com"
            mkdir -p "${HOME}/.ssh/"
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > "${HOME}/.ssh/config"
            DEPLOY_DOCS_SSH_FILE="${DEPLOY_DOCS_SSH_FINGERPRINT//:}"
            DEPLOY_DOCS_SSH_FILE="${HOME}/.ssh/id_rsa_${DEPLOY_DOCS_SSH_FILE//\"}"
            if [ -f "${DEPLOY_DOCS_SSH_FILE}" ]; then
              echo "Found Deploy SSH key file ${DEPLOY_DOCS_SSH_FILE}"
              ssh-add -D > /dev/null
              ssh-add "${DEPLOY_DOCS_SSH_FILE}"
            fi
      - run:
          name: Deploy installer
          command: |
            cd /tmp/installer
            git init
            git checkout -b main
            git add -A
            git commit -m "Automatically pushed from drevops/drevops"
            git remote add origin git@github.com:drevops/installer.git
            git push origin main --force
  #=============================================================================
  #;> DREVOPS_DEV

#:###############################################################################
#: WORKFLOWS
#:###############################################################################
workflows:
  version: 2
  # Commit workflow. Runs for every commit push to the remote repository.
  commit:
    jobs:
      #;< !PROVISION_USE_PROFILE
      - database:
          filters:
            tags:
              only: /.*/
      #;> !PROVISION_USE_PROFILE
      - build:
          #;< !PROVISION_USE_PROFILE
          requires:
            - database
          #;> !PROVISION_USE_PROFILE
          filters:
            tags:
              only: /.*/
      #;< DEPLOYMENT
      - deploy:
          requires:
            - build
          filters:
            branches:
              # Allowed branches:
              # - main, master, develop, ci, cisomething
              # - deps/*
              # - feature/description, feature/123-description
              # - release/123.456.789, release/123.456.789-rc.123 (per https://semver.org/)
              # - release/2023-04-17, release/2023-04-17.123 (date-based)
              # - hotfix/123.456.789, hotfix/123.456.789-rc.1213 (per https://semver.org/)
              # - hotfix/2023-04-17, hotfix/2023-04-17.123 (date-based)
              only: /^(main|master|develop)$|^feature\/[a-zA-z0-9\-\.\,]+|^ci.*|^deps\/.*|^(release|hotfix)\/[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$|^(release|hotfix)\/[0-9]{4}-[0-9]{2}-[0-9]{2}(\.[0-9]+)?$/
            tags:
              ignore: /.*/
      - deploy_tags:
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              # Allowed tags:
              # - 123.456.789, 123.456.789-rc.123 (per https://semver.org/)
              # - 2023-04-17, 2023-04-17.123 (date-based)
              only: /^[0-9]+(\.[0-9]+){2}(-rc\.[0-9]+)?$|^[0-9]{4}-[0-9]{2}-[0-9]{2}(\.[0-9]+)?$/
      #;> DEPLOYMENT

  #;============================================================================
  #; DREVOPS development section. Removed during DrevOps installation/update.
  #;============================================================================
  #;
  #;< DREVOPS_DEV
  # Run unit and functional tests for DrevOps.
  # Note that these jobs must run within the "commit" workflow, because they
  # depend on the "build" job.
      - drevops_dev_test:
          filters:
            tags:
              only: /.*/
      - drevops_dev_test_workflow:
          filters:
            tags:
              only: /.*/
      # Run deployment tests for DrevOps.
      - drevops_dev_test_deployment:
          filters:
            tags:
              only: /.*/
      # Run tests after 'build' job.
      - drevops_dev_test_postbuild:
          requires:
            - build
          filters:
            tags:
              only: /.*/
      # Run actual deployment of DrevOps code to destination codebase (integration test).
      # @see https://github.com/drevops/drevops-destination
      - drevops_dev_deploy:
          requires:
            - build
            - drevops_dev_test
            - drevops_dev_test_workflow
          filters:
            branches:
              # Allowed branches: 7.x, 8.x, 9.x, feature/7.x-description, feature/8.x-description, feature/9.x-description
              only: /main|develop|7\.x|feature\/(?:7\.x)[a-zA-z0-9\-\.\,]+/
            tags:
              ignore: /.*/
      # Run actual deployment of DrevOps code to destination codebase (integration test).
      # @see https://github.com/drevops/drevops-destination
      - drevops_dev_deploy_tags:
          requires:
            - build
            - drevops_dev_test
            - drevops_dev_test_workflow
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/

      # Build and publish DrevOps docs.
      - drevops_dev_deploy_docs:
          requires:
            - build
            - drevops_dev_test
            - drevops_dev_test_workflow
          filters:
            branches:
              # 'main' or any branch with 'docs' in the name.
              only: /^main$|.*docs.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/

      # Publish DrevOps installer.
      - drevops_dev_deploy_installer:
          requires:
            - drevops_dev_test
          filters:
            branches:
              only: /^feature\/installer-update$/
            tags:
              only: /^[0-9]+(\.[0-9]+)+(-rc[0-9]+)?$/

  # Test workflow to test DREVOPS_DB_DOCKER_IMAGE workflow for DB from file.
  drevops_dev_didi_fi:
    jobs:
      - drevops_dev_didi_database_fi
      - drevops_dev_didi_build_fi:
          requires:
            - drevops_dev_didi_database_fi

  # Test workflow to test DREVOPS_DB_DOCKER_IMAGE workflow for DB from docker registry.
  drevops_dev_didi_ii:
    jobs:
      - drevops_dev_database_ii
      - drevops_dev_didi_build_ii:
          requires:
            - drevops_dev_database_ii
  #=============================================================================
  #;> DREVOPS_DEV

  #;< !PROVISION_USE_PROFILE
  # Nightly database workflow runs overnight to capture fresh database and cache it.
  nightly_db:
    triggers:
      - schedule:
          cron: *nightly_db_schedule
          filters:
            branches:
              only:
                - *nightly_db_branch
    jobs:
      - database_nightly
  #;> !PROVISION_USE_PROFILE

  #;< RENOVATEBOT
  # Self-hosted Renovatebot workflow.
  renovatebot_self_hosted:
    triggers:
      - schedule:
          cron: *renovatebot_schedule
          filters:
            branches:
              only:
                - *renovatebot_branch
    jobs:
      - renovatebot_self_hosted
  #;> RENOVATEBOT
