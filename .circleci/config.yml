# YAML supports anchors and references.
# @see http://blog.daemonl.com/2016/02/yaml.html
#
# @todo:
# - add drush to dependency container
# - make DB import work for tests
# - run drupal tests
# - optimize apache config
# - remove php7.so inclusion - it should be in container
# - add public dir preparation to build step
# - add selenium tests
# - add generic steps
version: 2

references:
  # Variables.
  workspace_root:     &workspace_root     /home/circleci/project
  code_dir:           &code_dir           code
  code_root:          &code_root          /home/circleci/project/code
  web_dir:            &web_dir            docroot
  web_root:           &web_root           /home/circleci/project/code/docroot
  data_dir:           &data_dir           data
  data_root:          &data_root          /home/circleci/project/data
  server:             &server             local.mysiteurl
  web_url:            &web_url            http://local.mysiteurl
  deps_cache_key:     &deps_cache_key     v2-dependencies-{{ checksum "composer.json" }}-{{ epoch }}
  deps_cache_key_any: &deps_cache_key_any v2-dependencies-{{ checksum "composer.json" }}

  # Configuration shared between all containers.
  container_config: &container_config
    working_directory: /home/circleci/project/code

    environment: &container_config_environment
      WORKSPACE_ROOT: *workspace_root
      CODE_ROOT: *code_root
      DATA_ROOT: *data_root
      WEB_ROOT: *web_root
      SERVER: *server
      WEB_URL: *web_url
      MYSQL_USER: ubuntu
      MYSQL_PASSWORD: ubuntu
      MYSQL_DATABASE: circle_test
      MYSQL_HOST: 127.0.0.1
      MYSQL_ROOT_PASSWORD: ubuntu
      MYSQL_ROOT_HOST: 127.0.0.1

    docker:
      - image: circleci/php:7.1-apache-browsers
        environment:
          <<: *container_config_environment
      - image: mysql:5.7
        environment:
          <<: *container_config_environment

  # Re-usable steps.
  steps: &common_config
    run:
      name: Apply common configuration
      command: |
        echo 127.0.0.1 $SERVER | sudo tee -a /etc/hosts
        echo 'export PATH=$HOME/.composer/vendor/bin:$PATH' >> ~/.bashrc
        echo 'export PATH=$HOME/.composer/vendor/bin:$PATH' >> $BASH_ENV

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  code_dependencies:
    <<: *container_config
    steps:
      - *common_config

      # @debug
      - run: printenv

      - checkout
      # @debug
      - run: test -d $WEB_ROOT/sites

      - restore_cache:
          keys:
            - *deps_cache_key_any

      - run:
          name: Install dependencies
          command: composer install -n --prefer-dist

      - save_cache:
          paths:
          # @note: We do not cache vendor dir as this prevent Drupal core files
          # from being built on the next run and we cannot cache the whole
          # docroot as it contains excluded files.
            - ~/.composer/cache
          key: *deps_cache_key

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *code_dir

      # Validate step results.
      # @debug
      - run: test -d ~/.composer/cache
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: cat /home/circleci/project/code/docroot/sites/default/settings.beetbox.php

  # Download DB.
  download_db:
    <<: *container_config
    working_directory: /home/circleci/project
    steps:
      - *common_config
      - restore_cache:
          keys:
            - v1-data-{{ .Branch }}

      # Download DB dump from public URL to test Drupal-dev project/build.
      # Remove the line below in your project/build.
      - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -L https://goo.gl/WFtJbT -o $DATA_ROOT/db.dist.sql; fi
      # [META] Uncomment the line below to download DB dump from FTP, using
      # variables set in Circle CI UI.
      # - run: if [ ! -f $DATA_ROOT/db.dist.sql ] ; then mkdir -p $DATA_ROOT && curl -u $FTP_USER:$FTP_PASS "ftp://$FTP_HOST/db.dist.sql" -o $DATA_ROOT/db.dist.sql; fi

      - save_cache:
          paths:
            - *data_dir
          key: v1-data-{{ .Branch }}

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - *data_dir

      # Validate step results.
      # @debug
      - run: test -f /home/circleci/project/data/db.dist.sql

  # Code style checking.
  # Fail fast if code style is incorrect.
  code_style:
    <<: *container_config
    steps:
      - *common_config
      - *attach_workspace

      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -d /home/circleci/project/code/docroot/sites/all/modules/custom

      - run:
          name: Lint code
          command: composer cs

      - run: test -d /home/circleci/project/code

  # Build.
  build:
    <<: *container_config
    steps:
      - *common_config
      - *attach_workspace

      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -f /home/circleci/project/data/db.dist.sql
      - run: test -f /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: cat /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: printenv

      - run:
          name: Install additional binaries
          command: |
            sudo apt-get -y install vim mysql-client libpng-dev

      # @debug
      - run: mysql -h 127.0.0.1 -u ubuntu -pubuntu --database=circle_test -e"quit"

      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-install gd

      - run:
          name: Display versions
          command: |
            php -v
            composer -v
            drush -v
            composer config --global --list
      

      # @debug
      - run: command -v drush
      - run: drush --version

      # Create local drush alias to make sure that composer code, which relies
      # on aliases when importing DB, works correctly.
      - run:
          name: Create local drush alias
          command: mkdir -p $HOME/.drush && echo "<?php \$aliases['$SERVER'] = ['uri' => '$SERVER', 'root' => '$WEB_ROOT'];" > $HOME/.drush/$SERVER.aliases.drushrc.php && drush sa && cat $HOME/.drush/$SERVER.aliases.drushrc.php

      - run:
          name: Symlink data into local data directory.
          command: ln -s $DATA_ROOT $CODE_ROOT/.data

      # @debug
      - run: test -L $CODE_ROOT/.data
      - run: test -f $CODE_ROOT/.data/db.dist.sql

      # Run actual project build.
      - run: composer build

      # @debug
      - run: drush status --root=$WEB_ROOT

      # Check that Drupal can be bootstrapped.
      - run: drush status --root=$WEB_ROOT | grep -aqoi "Drupal bootstrap\s*:\s*Successful"

      - run:
          name: Store built DB as an artefact.
          command: drush --root=$WEB_ROOT sql-dump > .data/db.sql

      # @debug
      - run: test -f $CODE_ROOT/.data/db.sql

  # Run tests.
  test_behat:
    <<: *container_config

    # Increase this value to run tests in parallel.
    parallelism: 1

    steps:
      - *common_config
      - *attach_workspace

      - run: sudo usermod -a -G circleci www-data
      - run: sudo chmod -Rf 755 $WORKSPACE_ROOT

      # Validate step pre-requisites.
      # @debug
      - run: test -d /home/circleci/project/code/vendor
      - run: test -d /home/circleci/project/code/node_modules
      - run: test -f /home/circleci/project/code/docroot/index.php
      - run: test -f /home/circleci/project/data/db.dist.sql
      - run: test -f /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: cat /home/circleci/project/code/docroot/sites/default/settings.beetbox.php
      - run: printenv

      - run:
          name: Install additional binaries
          command: |
            sudo apt-get -y install vim mysql-client libpng-dev

      # @debug
      - run: mysql -h 127.0.0.1 -u ubuntu -pubuntu --database=circle_test -e"quit"

      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
#            sudo docker-php-ext-install gd

      - run:
          name: Display versions
          command: |
            php -v
            composer -v
            composer config --global --list
      
      - run: |
            echo "
            <VirtualHost *:80>
              UseCanonicalName Off
              DocumentRoot %DOCROOT%
              ServerName %SERVER%
              <Directory %DOCROOT%>
                Options FollowSymLinks
                AllowOverride All
                RewriteEngine On
                RewriteBase /
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteRule %DOCROOT%/(.*)$ index.php/?q=$1 [L,QSA]
                Require all granted
              </Directory>
            </VirtualHost>" > apache-vhost.conf
      - run: |
          sudo sed -e "s?%DOCROOT%?$WEB_ROOT?g" --in-place apache-vhost.conf
          sudo sed -e "s?%SERVER%?$SERVER?g" --in-place apache-vhost.conf
          sudo cp apache-vhost.conf /etc/apache2/sites-available/000-default.conf

      # @debug
      - run: cat /etc/apache2/sites-available/000-default.conf

      - run: sudo a2enmod rewrite && sudo a2enmod proxy_http
      - run: sudo service apache2 stop && sudo service apache2 start
      # Validate that Apache can serve PHP pages.
      - run: echo "<?php phpinfo();" > $WEB_ROOT/info.php && curl -k -s -o info.html $WEB_URL/info.php && cat info.html | grep -aqoi "Build Date" && cat info.html && rm $WEB_ROOT/info.php && rm info.html;

  # Deploy primary branches.
  deploy_primary:
    <<: *container_config
    steps:
      - run: echo "Running deployment command for 'primary' branches"

  # Deploy feature branches.
  deploy_features:
    <<: *container_config
    steps:
      - run: echo "Running deployment command for 'feature' branches"

workflows:
  version: 2

  main:
    jobs:
      - code_dependencies
      - download_db
#      - code_style:
#          requires:
#            - code_dependencies
      - build:
          requires:
            - code_dependencies
            - download_db
#            - code_style
      - test_behat:
          requires:
            - build
      - deploy_primary:
          requires:
            - test_behat
          filters:
            branches:
              only: /master|develop|ci|(release\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?|(hotfix\/)?[0-9]+(\.[0-9]+)+(-rc[0-9]+)?/
      - deploy_features:
          requires:
            - test_behat
          filters:
            branches:
              only: /feature\/[a-zA-z0-9\-]+/
